var searchIndex = {};
searchIndex["dnstap"] = {"doc":"An implementation of the dnstap protocol","items":[[3,"DNSMessage","dnstap","A DNS message.",null,null],[12,"identity","","",0,null],[12,"version","","",0,null],[12,"message_type","","",0,null],[12,"socket_family","","",0,null],[12,"socket_protocol","","",0,null],[12,"query_address","","",0,null],[12,"query_port","","",0,null],[12,"query_time","","",0,null],[12,"query_packet","","",0,null],[12,"response_address","","",0,null],[12,"response_port","","",0,null],[12,"response_time","","",0,null],[12,"response_packet","","",0,null],[12,"bailiwick","","",0,null],[3,"AuthQuery","","",null,null],[12,"identity","","",1,null],[12,"version","","",1,null],[12,"socket_protocol","","",1,null],[12,"query_address","","",1,null],[12,"query_port","","",1,null],[12,"query_time","","",1,null],[12,"query_packet","","",1,null],[3,"AuthResponse","","",null,null],[12,"identity","","",2,null],[12,"version","","",2,null],[12,"message_type","","",2,null],[12,"socket_protocol","","",2,null],[12,"query_address","","",2,null],[12,"query_port","","",2,null],[12,"query_time","","",2,null],[12,"response_packet","","",2,null],[3,"ResolverQuery","","",null,null],[12,"identity","","",3,null],[12,"version","","",3,null],[12,"socket_protocol","","",3,null],[12,"query_time","","",3,null],[12,"query_packet","","",3,null],[12,"response_address","","",3,null],[12,"response_port","","",3,null],[12,"bailiwick","","",3,null],[3,"ResolverResponse","","",null,null],[12,"identity","","",4,null],[12,"version","","",4,null],[12,"socket_protocol","","",4,null],[12,"query_time","","",4,null],[12,"response_address","","",4,null],[12,"response_port","","",4,null],[12,"response_packet","","",4,null],[12,"response_time","","",4,null],[12,"bailiwick","","",4,null],[3,"ClientQuery","","",null,null],[12,"identity","","",5,null],[12,"version","","",5,null],[12,"socket_family","","",5,null],[12,"socket_protocol","","",5,null],[12,"query_time","","",5,null],[12,"query_packet","","",5,null],[3,"ClientResponse","","",null,null],[12,"identity","","",6,null],[12,"version","","",6,null],[12,"socket_family","","",6,null],[12,"socket_protocol","","",6,null],[12,"response_time","","",6,null],[12,"response_packet","","",6,null],[3,"DNSTapBuilder","","Builds a DNSTapWriter service.",null,null],[12,"backlog","","",7,null],[12,"unix_socket_path","","",7,null],[3,"DNSTapPendingWriter","","",null,null],[3,"DNSTapWriter","","DNSTapWriter is responsible for receiving DNS messages, connecting (and automatically\nreconnecting) to a UNIX socket, and asynchronously pushing the serialized data using\nframe stream protocol.",null,null],[3,"Sender","","Sender is a cloneable structure to send DNS messages.",null,null],[4,"MessageType","","",null,null],[13,"AUTH_QUERY","","",8,null],[13,"AUTH_RESPONSE","","",8,null],[13,"RESOLVER_QUERY","","",8,null],[13,"RESOLVER_RESPONSE","","",8,null],[13,"CLIENT_QUERY","","",8,null],[13,"CLIENT_RESPONSE","","",8,null],[13,"FORWARDER_QUERY","","",8,null],[13,"FORWARDER_RESPONSE","","",8,null],[13,"STUB_QUERY","","",8,null],[13,"STUB_RESPONSE","","",8,null],[13,"TOOL_QUERY","","",8,null],[13,"TOOL_RESPONSE","","",8,null],[4,"SocketFamily","","",null,null],[13,"INET","","",9,null],[13,"INET6","","",9,null],[4,"SocketProtocol","","",null,null],[13,"UDP","","",10,null],[13,"TCP","","",10,null],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"new","","Returns a minimal DNS message",0,{"inputs":[{"name":"option"},{"name":"option"},{"name":"messagetype"}],"output":{"name":"dnsmessage"}}],[11,"clone","","",1,null],[11,"hash","","",1,null],[11,"into","","",1,null],[11,"clone","","",2,null],[11,"hash","","",2,null],[11,"into","","",2,null],[11,"clone","","",3,null],[11,"hash","","",3,null],[11,"into","","",3,null],[11,"clone","","",4,null],[11,"hash","","",4,null],[11,"into","","",4,null],[11,"clone","","",5,null],[11,"hash","","",5,null],[11,"into","","",5,null],[11,"clone","","",6,null],[11,"hash","","",6,null],[11,"into","","",6,null],[11,"clone","","",7,null],[11,"hash","","",7,null],[11,"default","","Returns a DNSTapBuilder boilerplate",7,{"inputs":[],"output":{"name":"dnstapbuilder"}}],[11,"backlog","","Maximum number of messages to keep in queue.",7,null],[11,"unix_socket_path","","Path to the UNIX socket to send dnstap data to.",7,null],[11,"listen","","Creates a DNSTapPendingWriter object. The communication channel is established at this\npoint, and the `sender()` function can be used in order to get `Sender` objects.",7,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"fmt","","",8,null],[11,"hash","","",8,null],[11,"value","","",8,null],[11,"from_i32","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",8,null],[11,"enum_descriptor_static","","",8,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",9,null],[11,"value","","",9,null],[11,"from_i32","","",9,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",9,null],[11,"enum_descriptor_static","","",9,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",10,null],[11,"hash","","",10,null],[11,"value","","",10,null],[11,"from_i32","","",10,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",10,null],[11,"enum_descriptor_static","","",10,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"listen","","Creates a DNSTapPendingWriter object. The communication channel is established at this\npoint, and the `sender()` function can be used in order to get `Sender` objects.",11,{"inputs":[{"name":"dnstapbuilder"}],"output":{"name":"result"}}],[11,"start","","Spawns a new task handling writes to the socket.",11,null],[11,"sender","","Returns a cloneable `Sender` object that can used to send DNS messages.",11,null],[11,"start","","Spawns a new task handling writes to the socket.",12,{"inputs":[{"name":"dnstappendingwriter"}],"output":{"name":"result"}}],[11,"join","","",12,null],[11,"sender","","Returns a cloneable `Sender` object that can used to send DNS messages.",12,null],[11,"clone","","",13,null],[11,"send","","Sends a DNS message.",13,null]],"paths":[[3,"DNSMessage"],[3,"AuthQuery"],[3,"AuthResponse"],[3,"ResolverQuery"],[3,"ResolverResponse"],[3,"ClientQuery"],[3,"ClientResponse"],[3,"DNSTapBuilder"],[4,"MessageType"],[4,"SocketFamily"],[4,"SocketProtocol"],[3,"DNSTapPendingWriter"],[3,"DNSTapWriter"],[3,"Sender"]]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event\nnotification, and other useful utilities for building high performance IO\napps.","items":[[3,"PollOpt","mio","Configures readiness polling behavior for a given `Evented` value.",null,null],[3,"Ready","","A set of readiness events returned by `Poll`.",null,null],[3,"Event","","An readiness event returned by `Poll`.",null,null],[3,"Poll","","Polls for readiness events on all registered values.",null,null],[3,"Events","","A buffer for I/O events to get placed into, passed to `Poll::poll`.",null,null],[3,"EventsIter","","Iterate an Events structure",null,null],[3,"Registration","","Handle to a Poll registration. Used for registering custom types for event\nnotifications.",null,null],[3,"SetReadiness","","Used to update readiness for an associated `Registration`. `SetReadiness`\nis `Sync` which allows it to be updated across threads.",null,null],[3,"Token","","Used to identify which `Evented` value is associated with an `Event`\nnotification returned by `Poll`.",null,null],[12,"0","","",0,null],[5,"would_block","","Returns a std `WouldBlock` error without allocating",null,{"inputs":[],"output":{"name":"error"}}],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"edge","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"empty","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"urgent","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"all","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","",1,null],[11,"is_level","","",1,null],[11,"is_oneshot","","",1,null],[11,"is_urgent","","",1,null],[11,"bits","","",1,null],[11,"contains","","",1,null],[11,"insert","","",1,null],[11,"remove","","",1,null],[11,"bitor","","",1,null],[11,"bitxor","","",1,null],[11,"bitand","","",1,null],[11,"sub","","",1,null],[11,"not","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"none","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"readable","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"writable","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"error","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"hup","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"all","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"is_none","","",2,null],[11,"is_readable","","",2,null],[11,"is_writable","","",2,null],[11,"is_error","","",2,null],[11,"is_hup","","",2,null],[11,"insert","","",2,null],[11,"remove","","",2,null],[11,"bits","","",2,null],[11,"contains","","",2,null],[11,"bitor","","",2,null],[11,"bitxor","","",2,null],[11,"bitand","","",2,null],[11,"sub","","",2,null],[11,"not","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"new","","Create a new Event.",3,{"inputs":[{"name":"ready"},{"name":"token"}],"output":{"name":"event"}}],[11,"kind","","",3,null],[11,"token","","",3,null],[11,"clone","","",4,null],[11,"new","","Return a new `Poll` handle using a default configuration.",5,{"inputs":[],"output":{"name":"result"}}],[11,"register","","Register an `Evented` handle with the `Poll` instance.",5,null],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",5,null],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",5,null],[11,"poll","","Block the current thread and wait until any `Evented` values registered\nwith the `Poll` instance are ready or the given timeout has elapsed.",5,null],[11,"fmt","","",5,null],[11,"with_capacity","","Create a net blank set of events capable of holding up to `capacity`\nevents.",6,{"inputs":[{"name":"usize"}],"output":{"name":"events"}}],[11,"get","","Returns the `idx`-th event.",6,null],[11,"len","","Returns how many events this buffer contains.",6,null],[11,"is_empty","","Returns whether this buffer contains 0 events.",6,null],[11,"iter","","",6,null],[11,"next","","",7,null],[11,"new","","Create a new `Registration` associated with the given `Poll` instance.\nThe returned `Registration` will be associated with this `Poll` for its\nentire lifetime.",8,null],[11,"update","","",8,null],[11,"deregister","","",8,null],[11,"drop","","",8,null],[11,"fmt","","",8,null],[11,"readiness","","",4,null],[11,"set_readiness","","",4,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[0,"channel","","Thread safe communication channel implementing `Evented`",null,null],[3,"SenderCtl","mio::channel","Tracks messages sent on a channel in order to update readiness.",null,null],[3,"ReceiverCtl","","Tracks messages received on a channel in order to track readiness.",null,null],[3,"Sender","","",null,null],[3,"SyncSender","","",null,null],[3,"Receiver","","",null,null],[4,"SendError","","",null,null],[13,"Io","","",9,null],[13,"Disconnected","","",9,null],[4,"TrySendError","","",null,null],[13,"Io","","",10,null],[13,"Full","","",10,null],[13,"Disconnected","","",10,null],[5,"channel","","Creates a new asynchronous channel, where the `Receiver` can be registered\nwith `Poll`.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel where the `Receiver` can be\nregistered with `Poll`.",null,null],[5,"ctl_pair","","",null,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"send","","",11,null],[11,"clone","","",11,null],[11,"send","","",12,null],[11,"try_send","","",12,null],[11,"clone","","",12,null],[11,"try_recv","","",13,null],[11,"register","","",13,null],[11,"reregister","","",13,null],[11,"deregister","","",13,null],[11,"inc","","Call to track that a message has been sent",14,null],[11,"clone","","",14,null],[11,"drop","","",14,null],[11,"dec","","",15,null],[11,"register","","",15,null],[11,"reregister","","",15,null],[11,"deregister","","",15,null],[11,"from","","",9,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"senderror"}}],[11,"from","","",10,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"from","","",10,{"inputs":[{"name":"senderror"}],"output":{"name":"trysenderror"}}],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"trysenderror"}}],[0,"timer","mio","Timer optimized for I/O related operations",null,null],[3,"Timer","mio::timer","",null,null],[3,"Builder","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[4,"TimerErrorKind","","",null,null],[13,"TimerOverflow","","",16,null],[6,"Result","","",null,null],[6,"TimerResult","","",null,null],[6,"OldTimerResult","","",null,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",18,null],[11,"fmt","","",16,null],[11,"tick_duration","","",19,null],[11,"num_slots","","",19,null],[11,"capacity","","",19,null],[11,"build","","",19,null],[11,"default","","",19,{"inputs":[],"output":{"name":"builder"}}],[11,"set_timeout","","",20,null],[11,"cancel_timeout","","",20,null],[11,"poll","","",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"timer"}}],[11,"register","","",20,null],[11,"reregister","","",20,null],[11,"deregister","","",20,null],[11,"fmt","","",18,null],[11,"description","","",18,null],[11,"fmt","","",16,null],[0,"deprecated","mio","EventLoop and other deprecated types",null,null],[4,"Shutdown","mio::deprecated","",null,null],[13,"Read","","Further receptions will be disallowed.",21,null],[13,"Write","","Further  transmissions will be disallowed.",21,null],[13,"Both","","Further receptions and transmissions will be disallowed.",21,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopBuilder","","",null,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[4,"NotifyError","","",null,null],[13,"Io","","",22,null],[13,"Full","","",22,null],[13,"Closed","","",22,null],[11,"fmt","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"eventloopbuilder"}}],[11,"clone","","",23,null],[11,"new","","Construct a new `EventLoopBuilder` with the default configuration\nvalues.",23,{"inputs":[],"output":{"name":"eventloopbuilder"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event\nloop&#39;s notification channel before a send will fail.",23,null],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of\nthe event loop.",23,null],[11,"timer_tick","","",23,null],[11,"timer_wheel_size","","",23,null],[11,"timer_capacity","","",23,null],[11,"build","","Constructs a new `EventLoop` using the configured values. The\n`EventLoop` will not be running.",23,null],[11,"new","","Constructs a new `EventLoop` using the default configuration values.\nThe `EventLoop` will not be running.",24,{"inputs":[],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a\nthread-safe way, waking up the event loop if needed.",24,null],[11,"timeout","","Schedules a timeout after the requested time interval. When the\nduration has been reached,\n[Handler::timeout](trait.Handler.html#method.timeout) will be invoked\npassing in the supplied token.",24,null],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it\nwill not be triggered in the future.",24,null],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the\ncurrent iteration.",24,null],[11,"is_running","","Indicates whether the event loop is currently running. If it&#39;s not it has either\nstopped or is scheduled to stop on the next tick.",24,null],[11,"register","","Registers an IO handle with the event loop.",24,null],[11,"reregister","","Re-Registers an IO handle with the event loop.",24,null],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever\nany of the registered handles are ready.",24,null],[11,"deregister","","Deregisters an IO handle with the event loop.",24,null],[11,"run_once","","Spin the event loop once, with a given timeout (forever if `None`),\nand notify the handler if any of the registered handles become ready\nduring that time.",24,null],[11,"fmt","","",24,null],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"send","","",25,null],[11,"fmt","","",22,null],[11,"fmt","","",22,null],[11,"description","","",22,null],[11,"cause","","",22,null],[11,"from","","",22,{"inputs":[{"name":"trysenderror"}],"output":{"name":"notifyerror"}}],[0,"unix","","",null,null],[4,"Shutdown","mio::deprecated::unix","",null,null],[13,"Read","","Further receptions will be disallowed.",21,null],[13,"Write","","Further  transmissions will be disallowed.",21,null],[13,"Both","","Further receptions and transmissions will be disallowed.",21,null],[3,"Io","","",null,null],[3,"UnixSocket","","",null,null],[3,"UnixStream","","",null,null],[3,"UnixListener","","",null,null],[3,"PipeReader","","",null,null],[3,"PipeWriter","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",26,null],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",26,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",26,null],[11,"bind","","Bind the socket to the specified address",26,null],[11,"listen","","Listen for incoming requests",26,null],[11,"try_clone","","",26,null],[11,"register","","",26,null],[11,"reregister","","",26,null],[11,"deregister","","",26,null],[11,"from","","",26,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",27,null],[11,"connect","","",27,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",27,null],[11,"shutdown","","",27,null],[11,"read_recv_fd","","",27,null],[11,"try_read_recv_fd","","",27,null],[11,"write_send_fd","","",27,null],[11,"try_write_send_fd","","",27,null],[11,"read","","",27,null],[11,"write","","",27,null],[11,"flush","","",27,null],[11,"register","","",27,null],[11,"reregister","","",27,null],[11,"deregister","","",27,null],[11,"from","","",27,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",28,null],[11,"bind","","",28,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",28,null],[11,"try_clone","","",28,null],[11,"register","","",28,null],[11,"reregister","","",28,null],[11,"deregister","","",28,null],[11,"accept","","",28,null],[11,"from","","",28,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",29,null],[11,"from_stdout","","",29,{"inputs":[{"name":"childstdout"}],"output":{"name":"result"}}],[11,"from_stderr","","",29,{"inputs":[{"name":"childstderr"}],"output":{"name":"result"}}],[11,"read","","",29,null],[11,"register","","",29,null],[11,"reregister","","",29,null],[11,"deregister","","",29,null],[11,"from","","",29,{"inputs":[{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",30,null],[11,"from_stdin","","",30,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"write","","",30,null],[11,"flush","","",30,null],[11,"register","","",30,null],[11,"reregister","","",30,null],[11,"deregister","","",30,null],[11,"from","","",30,{"inputs":[{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"into_raw_fd","","",26,null],[11,"as_raw_fd","","",26,null],[11,"from_raw_fd","","",26,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixsocket"}}],[11,"into_raw_fd","","",27,null],[11,"as_raw_fd","","",27,null],[11,"from_raw_fd","","",27,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",28,null],[11,"as_raw_fd","","",28,null],[11,"from_raw_fd","","",28,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",29,null],[11,"as_raw_fd","","",29,null],[11,"from_raw_fd","","",29,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipereader"}}],[11,"into_raw_fd","","",30,null],[11,"as_raw_fd","","",30,null],[11,"from_raw_fd","","",30,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipewriter"}}],[8,"TryAccept","mio::deprecated","",null,null],[16,"Output","","",31,null],[10,"accept","","",31,null],[8,"TryRead","","",null,null],[10,"try_read","","",32,null],[8,"TryWrite","","",null,null],[10,"try_write","","",33,null],[8,"Handler","","",null,null],[16,"Timeout","","",34,null],[16,"Message","","",34,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",34,null],[11,"notify","","Invoked when a message has been received via the event loop&#39;s channel.",34,null],[11,"timeout","","Invoked when a timeout has completed.",34,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",34,null],[11,"tick","","Invoked at the end of an event loop tick.",34,null],[0,"tcp","mio","Primitives for working with TCP",null,null],[4,"Shutdown","mio::tcp","Possible values which can be passed to the [`shutdown`] method of\n[`TcpStream`].",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",35,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",35,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",35,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[0,"udp","mio","Primitives for working with UDP",null,null],[3,"UdpSocket","mio::udp","",null,null],[0,"unix","mio","Unix only extensions",null,null],[3,"EventedFd","mio::unix","",null,null],[12,"0","","",36,null],[8,"Evented","mio","A value that may be registered with an `EventLoop`",null,null],[10,"register","","",37,null],[10,"reregister","","",37,null],[10,"deregister","","",37,null],[11,"fmt","mio::deprecated::unix","",21,null],[11,"clone","","",21,null],[11,"eq","","",21,null],[11,"eq","mio::tcp","",35,null],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"fmt","","",38,null],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the\nspecified address.",38,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",38,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",38,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",38,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",38,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",38,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",38,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",38,null],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",38,null],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so\nthe amount of milliseconds between them.",38,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",38,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",38,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",38,null],[11,"read","","",38,null],[11,"write","","",38,null],[11,"flush","","",38,null],[11,"register","","",38,null],[11,"reregister","","",38,null],[11,"deregister","","",38,null],[11,"fmt","","",39,null],[11,"bind","","Convenience method to bind a new TCP listener to the specified address\nto receive new connections.",39,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a\n`std::net::TcpListener` type.",39,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",39,null],[11,"local_addr","","Returns the local socket address of this listener.",39,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",39,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",39,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",39,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",39,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",39,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",39,null],[11,"register","","",39,null],[11,"reregister","","",39,null],[11,"deregister","","",39,null],[11,"into_raw_fd","","",38,null],[11,"as_raw_fd","","",38,null],[11,"from_raw_fd","","",38,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"into_raw_fd","","",39,null],[11,"as_raw_fd","","",39,null],[11,"from_raw_fd","","",39,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio::udp","",40,null],[11,"bind","","Creates a UDP socket from the given address.",40,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std\nsocket.",40,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address that this socket was created from.",40,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",40,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",40,null],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",40,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",40,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",40,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",40,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",40,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",40,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",40,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",40,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",40,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",40,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",40,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",40,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",40,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",40,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",40,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",40,null],[11,"register","","",40,null],[11,"reregister","","",40,null],[11,"deregister","","",40,null],[11,"into_raw_fd","","",40,null],[11,"as_raw_fd","","",40,null],[11,"from_raw_fd","","",40,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio::unix","",36,null],[11,"register","","",36,null],[11,"reregister","","",36,null],[11,"deregister","","",36,null],[11,"fmt","mio::deprecated::unix","",41,null],[11,"from_raw_fd","","",41,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"into_raw_fd","","",41,null],[11,"as_raw_fd","","",41,null],[11,"register","","",41,null],[11,"reregister","","",41,null],[11,"deregister","","",41,null],[11,"read","","",41,null],[11,"write","","",41,null],[11,"flush","","",41,null],[11,"drop","","",41,null],[11,"ready","mio::deprecated","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",34,null],[11,"notify","","Invoked when a message has been received via the event loop&#39;s channel.",34,null],[11,"timeout","","Invoked when a timeout has completed.",34,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",34,null],[11,"tick","","Invoked at the end of an event loop tick.",34,null]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"Event"],[3,"SetReadiness"],[3,"Poll"],[3,"Events"],[3,"EventsIter"],[3,"Registration"],[4,"SendError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"SenderCtl"],[3,"ReceiverCtl"],[4,"TimerErrorKind"],[3,"Timeout"],[3,"TimerError"],[3,"Builder"],[3,"Timer"],[4,"Shutdown"],[4,"NotifyError"],[3,"EventLoopBuilder"],[3,"EventLoop"],[3,"Sender"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"],[8,"TryAccept"],[8,"TryRead"],[8,"TryWrite"],[8,"Handler"],[4,"Shutdown"],[3,"EventedFd"],[8,"Evented"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Io"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EAGAIN","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"EALREADY","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"ENOTSUP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"ELOOP","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"EPROCLIM","","",0,null],[13,"EUSERS","","",0,null],[13,"EDQUOT","","",0,null],[13,"ESTALE","","",0,null],[13,"EREMOTE","","",0,null],[13,"EBADRPC","","",0,null],[13,"ERPCMISMATCH","","",0,null],[13,"EPROGUNAVAIL","","",0,null],[13,"EPROGMISMATCH","","",0,null],[13,"EPROCUNAVAIL","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"EFTYPE","","",0,null],[13,"EAUTH","","",0,null],[13,"ENEEDAUTH","","",0,null],[13,"EPWROFF","","",0,null],[13,"EDEVERR","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"EBADEXEC","","",0,null],[13,"EBADARCH","","",0,null],[13,"ESHLIBVERS","","",0,null],[13,"EBADMACHO","","",0,null],[13,"ECANCELED","","",0,null],[13,"EIDRM","","",0,null],[13,"ENOMSG","","",0,null],[13,"EILSEQ","","",0,null],[13,"ENOATTR","","",0,null],[13,"EBADMSG","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"ENODATA","","",0,null],[13,"ENOLINK","","",0,null],[13,"ENOSR","","",0,null],[13,"ENOSTR","","",0,null],[13,"EPROTO","","",0,null],[13,"ETIME","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"ENOPOLICY","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"EQFULL","","",0,null],[4,"Error","","",null,null],[13,"Sys","","",1,null],[13,"InvalidPath","","",1,null],[0,"libc","","",null,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EAGAIN","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"EALREADY","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"ENOTSUP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"ELOOP","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"EPROCLIM","","",0,null],[13,"EUSERS","","",0,null],[13,"EDQUOT","","",0,null],[13,"ESTALE","","",0,null],[13,"EREMOTE","","",0,null],[13,"EBADRPC","","",0,null],[13,"ERPCMISMATCH","","",0,null],[13,"EPROGUNAVAIL","","",0,null],[13,"EPROGMISMATCH","","",0,null],[13,"EPROCUNAVAIL","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"EFTYPE","","",0,null],[13,"EAUTH","","",0,null],[13,"ENEEDAUTH","","",0,null],[13,"EPWROFF","","",0,null],[13,"EDEVERR","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"EBADEXEC","","",0,null],[13,"EBADARCH","","",0,null],[13,"ESHLIBVERS","","",0,null],[13,"EBADMACHO","","",0,null],[13,"ECANCELED","","",0,null],[13,"EIDRM","","",0,null],[13,"ENOMSG","","",0,null],[13,"EILSEQ","","",0,null],[13,"ENOATTR","","",0,null],[13,"EBADMSG","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"ENODATA","","",0,null],[13,"ENOLINK","","",0,null],[13,"ENOSR","","",0,null],[13,"ENOSTR","","",0,null],[13,"EPROTO","","",0,null],[13,"ETIME","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"ENOPOLICY","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"EQFULL","","",0,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"fmt","nix","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[17,"ELAST","nix::errno","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EL2NSYNC","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed\ninformation about the error can be found in `errno`",null,null],[10,"sentinel","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",0,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",0,null],[11,"from_i32","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",0,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This\nshould not be used when `-1` is not the errno sentinel value.",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",0,null],[11,"fmt","","",0,null],[0,"features","","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"OFlag","nix::fcntl","",null,null],[3,"FdFlag","","",null,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",3,null],[13,"F_DUPFD_CLOEXEC","","",3,null],[13,"F_GETFD","","",3,null],[13,"F_SETFD","","",3,null],[13,"F_GETFL","","",3,null],[13,"F_SETFL","","",3,null],[13,"F_SETLK","","",3,null],[13,"F_SETLKW","","",3,null],[13,"F_GETLK","","",3,null],[13,"F_FULLFSYNC","","",3,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",4,null],[13,"LockExclusive","","",4,null],[13,"Unlock","","",4,null],[13,"LockSharedNonblock","","",4,null],[13,"LockExclusiveNonblock","","",4,null],[13,"UnlockNonblock","","",4,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"empty","","Returns an empty set of flags.",5,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",5,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",5,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",5,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",5,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,null],[11,"is_all","","Returns `true` if all flags are currently set.",5,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5,null],[11,"insert","","Inserts the specified flags in-place.",5,null],[11,"remove","","Removes the specified flags in-place.",5,null],[11,"toggle","","Toggles the specified flags in-place.",5,null],[11,"bitor","","Returns the union of the two sets of flags.",5,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",5,null],[11,"bitand","","Returns the intersection between the two sets of flags.",5,null],[11,"sub","","Returns the set difference of the two sets of flags.",5,null],[11,"not","","Returns the complement of this set of flags.",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"cmp","","",6,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"empty","","Returns an empty set of flags.",6,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",6,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",6,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",6,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,null],[11,"is_all","","Returns `true` if all flags are currently set.",6,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,null],[11,"insert","","Inserts the specified flags in-place.",6,null],[11,"remove","","Removes the specified flags in-place.",6,null],[11,"toggle","","Toggles the specified flags in-place.",6,null],[11,"bitor","","Returns the union of the two sets of flags.",6,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,null],[11,"bitand","","Returns the intersection between the two sets of flags.",6,null],[11,"sub","","Returns the set difference of the two sets of flags.",6,null],[11,"not","","Returns the complement of this set of flags.",6,null],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_FSYNC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[11,"clone","","",7,null],[11,"new","","",7,{"inputs":[{"name":"c_int"},{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"pollfd"}}],[11,"revents","","",7,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",8,null],[11,"partial_cmp","","",8,null],[11,"lt","","",8,null],[11,"le","","",8,null],[11,"gt","","",8,null],[11,"ge","","",8,null],[11,"cmp","","",8,null],[11,"hash","","",8,null],[11,"fmt","","",8,null],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"c_short"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",8,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,null],[11,"is_all","","Returns `true` if all flags are currently set.",8,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,null],[11,"insert","","Inserts the specified flags in-place.",8,null],[11,"remove","","Removes the specified flags in-place.",8,null],[11,"toggle","","Toggles the specified flags in-place.",8,null],[11,"bitor","","Returns the union of the two sets of flags.",8,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,null],[11,"bitand","","Returns the intersection between the two sets of flags.",8,null],[11,"sub","","Returns the set difference of the two sets of flags.",8,null],[11,"not","","Returns the complement of this set of flags.",8,null],[11,"from_iter","","",8,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[0,"sys","nix","",null,null],[0,"event","nix::sys","",null,null],[3,"KEvent","nix::sys::event","",null,null],[12,"ident","","",9,null],[12,"filter","","",9,null],[12,"flags","","",9,null],[12,"fflags","","",9,null],[12,"data","","",9,null],[12,"udata","","",9,null],[3,"EventFlag","","",null,null],[3,"FilterFlag","","",null,null],[4,"EventFilter","","",null,null],[13,"EVFILT_READ","","",10,null],[13,"EVFILT_WRITE","","",10,null],[13,"EVFILT_AIO","","",10,null],[13,"EVFILT_VNODE","","",10,null],[13,"EVFILT_PROC","","",10,null],[13,"EVFILT_SIGNAL","","",10,null],[13,"EVFILT_TIMER","","",10,null],[13,"EVFILT_MACHPORT","","",10,null],[13,"EVFILT_FS","","",10,null],[13,"EVFILT_USER","","",10,null],[13,"EVFILT_VM","","",10,null],[13,"EVFILT_SYSCOUNT","","",10,null],[5,"kqueue","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"kevent","","",null,null],[5,"kevent_ts","","",null,null],[5,"ev_set","","",null,{"inputs":[{"name":"kevent"},{"name":"usize"},{"name":"eventfilter"},{"name":"eventflag"},{"name":"filterflag"},{"name":"usize"}],"output":null}],[11,"clone","","",9,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_ERROR","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_RESOURCEEND","","",null,null],[17,"NOTE_APPACTIVE","","",null,null],[17,"NOTE_APPBACKGROUND","","",null,null],[17,"NOTE_APPNONUI","","",null,null],[17,"NOTE_APPINACTIVE","","",null,null],[17,"NOTE_APPALLSTATES","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_OOBAND","","",null,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"partial_cmp","","",11,null],[11,"lt","","",11,null],[11,"le","","",11,null],[11,"gt","","",11,null],[11,"ge","","",11,null],[11,"cmp","","",11,null],[11,"hash","","",11,null],[11,"fmt","","",11,null],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[],"output":{"name":"eventflag"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[],"output":{"name":"eventflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",11,{"inputs":[{"name":"u16"}],"output":{"name":"eventflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,null],[11,"is_all","","Returns `true` if all flags are currently set.",11,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,null],[11,"insert","","Inserts the specified flags in-place.",11,null],[11,"remove","","Removes the specified flags in-place.",11,null],[11,"toggle","","Toggles the specified flags in-place.",11,null],[11,"bitor","","Returns the union of the two sets of flags.",11,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,null],[11,"bitand","","Returns the intersection between the two sets of flags.",11,null],[11,"sub","","Returns the set difference of the two sets of flags.",11,null],[11,"not","","Returns the complement of this set of flags.",11,null],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"eventflag"}}],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"cmp","","",12,null],[11,"hash","","",12,null],[11,"fmt","","",12,null],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"filterflag"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"filterflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",12,{"inputs":[{"name":"u32"}],"output":{"name":"filterflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,null],[11,"is_all","","Returns `true` if all flags are currently set.",12,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,null],[11,"insert","","Inserts the specified flags in-place.",12,null],[11,"remove","","Removes the specified flags in-place.",12,null],[11,"toggle","","Toggles the specified flags in-place.",12,null],[11,"bitor","","Returns the union of the two sets of flags.",12,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,null],[11,"bitand","","Returns the intersection between the two sets of flags.",12,null],[11,"sub","","Returns the set difference of the two sets of flags.",12,null],[11,"not","","Returns the complement of this set of flags.",12,null],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"filterflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[0,"signal","","",null,null],[3,"SignalIterator","nix::sys::signal","",null,null],[3,"SaFlags","","",null,null],[3,"SigFlags","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"Signal","","",null,null],[13,"SIGHUP","","",13,null],[13,"SIGINT","","",13,null],[13,"SIGQUIT","","",13,null],[13,"SIGILL","","",13,null],[13,"SIGTRAP","","",13,null],[13,"SIGABRT","","",13,null],[13,"SIGBUS","","",13,null],[13,"SIGFPE","","",13,null],[13,"SIGKILL","","",13,null],[13,"SIGUSR1","","",13,null],[13,"SIGSEGV","","",13,null],[13,"SIGUSR2","","",13,null],[13,"SIGPIPE","","",13,null],[13,"SIGALRM","","",13,null],[13,"SIGTERM","","",13,null],[13,"SIGCHLD","","",13,null],[13,"SIGCONT","","",13,null],[13,"SIGSTOP","","",13,null],[13,"SIGTSTP","","",13,null],[13,"SIGTTIN","","",13,null],[13,"SIGTTOU","","",13,null],[13,"SIGURG","","",13,null],[13,"SIGXCPU","","",13,null],[13,"SIGXFSZ","","",13,null],[13,"SIGVTALRM","","",13,null],[13,"SIGPROF","","",13,null],[13,"SIGWINCH","","",13,null],[13,"SIGIO","","",13,null],[13,"SIGSYS","","",13,null],[13,"SIGEMT","","",13,null],[13,"SIGINFO","","",13,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",14,null],[13,"SigIgn","","",14,null],[13,"Handler","","",14,null],[13,"SigAction","","",14,null],[5,"sigaction","","",null,{"inputs":[{"name":"signal"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflags"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signal"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signal"}],"output":{"name":"result"}}],[17,"NSIG","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"next","","",15,null],[11,"iterator","","",13,{"inputs":[],"output":{"name":"signaliterator"}}],[11,"from_c_int","","",13,{"inputs":[{"name":"c_int"}],"output":{"name":"result"}}],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"clone","","",16,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"cmp","","",16,null],[11,"hash","","",16,null],[11,"fmt","","",16,null],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"saflags"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"saflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",16,{"inputs":[{"name":"c_int"}],"output":{"name":"saflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,null],[11,"is_all","","Returns `true` if all flags are currently set.",16,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,null],[11,"insert","","Inserts the specified flags in-place.",16,null],[11,"remove","","Removes the specified flags in-place.",16,null],[11,"toggle","","Toggles the specified flags in-place.",16,null],[11,"bitor","","Returns the union of the two sets of flags.",16,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,null],[11,"bitand","","Returns the intersection between the two sets of flags.",16,null],[11,"sub","","Returns the set difference of the two sets of flags.",16,null],[11,"not","","Returns the complement of this set of flags.",16,null],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"saflags"}}],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"partial_cmp","","",17,null],[11,"lt","","",17,null],[11,"le","","",17,null],[11,"gt","","",17,null],[11,"ge","","",17,null],[11,"cmp","","",17,null],[11,"hash","","",17,null],[11,"fmt","","",17,null],[11,"empty","","Returns an empty set of flags.",17,{"inputs":[],"output":{"name":"sigflags"}}],[11,"all","","Returns the set containing all flags.",17,{"inputs":[],"output":{"name":"sigflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",17,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",17,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",17,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",17,null],[11,"is_all","","Returns `true` if all flags are currently set.",17,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",17,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",17,null],[11,"insert","","Inserts the specified flags in-place.",17,null],[11,"remove","","Removes the specified flags in-place.",17,null],[11,"toggle","","Toggles the specified flags in-place.",17,null],[11,"bitor","","Returns the union of the two sets of flags.",17,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",17,null],[11,"bitand","","Returns the intersection between the two sets of flags.",17,null],[11,"sub","","Returns the set difference of the two sets of flags.",17,null],[11,"not","","Returns the complement of this set of flags.",17,null],[11,"from_iter","","",17,{"inputs":[{"name":"t"}],"output":{"name":"sigflags"}}],[11,"clone","","",18,null],[11,"all","","",18,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",18,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",18,null],[11,"clear","","",18,null],[11,"remove","","",18,null],[11,"contains","","",18,null],[11,"extend","","",18,null],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",18,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",18,null],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",18,null],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",18,null],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",18,null],[11,"wait","","Suspends execution of the calling thread until one of the signals in the\nsignal mask becomes pending, and returns the accepted signal.",18,null],[11,"as_ref","","",18,null],[11,"clone","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the\ntype of the `handler` argument.",19,{"inputs":[{"name":"sighandler"},{"name":"saflags"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",20,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",21,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",22,null],[12,"sa_family","","",22,null],[12,"sa_data","","",22,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",23,null],[12,"sin_family","","",23,null],[12,"sin_port","","",23,null],[12,"sin_addr","","",23,null],[12,"sin_zero","","",23,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",24,null],[12,"sin6_family","","",24,null],[12,"sin6_port","","",24,null],[12,"sin6_flowinfo","","",24,null],[12,"sin6_addr","","",24,null],[12,"sin6_scope_id","","",24,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",25,null],[12,"sun_family","","",25,null],[12,"sun_path","","",25,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",26,null],[12,"ss_family","","",26,null],[3,"UnixAddr","","A wrapper around `sockaddr_un`. We track the length of `sun_path`,\nbecause it may not be null-terminated (unconnected and abstract\nsockets). Note that the actual sockaddr length is greater by\n`size_of::&lt;sa_family_t&gt;()`.",null,null],[12,"0","","",27,null],[12,"1","","",27,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",28,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",29,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",30,null],[12,"imr_interface","","",30,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",31,null],[12,"ipv6mr_interface","","",31,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The\nsize and alignment match that of a cmsghdr followed by a T, but the\nfields are not accessible, as the actual types will change on a call\nto recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",32,null],[12,"address","","",32,null],[12,"flags","","",32,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",33,null],[12,"l_linger","","",33,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",34,null],[13,"Inet","","",34,null],[13,"Inet6","","",34,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",35,null],[13,"Unix","","",35,null],[4,"InetAddr","","",null,null],[13,"V4","","",36,null],[13,"V6","","",36,null],[4,"IpAddr","","",null,null],[13,"V4","","",37,null],[13,"V6","","",37,null],[4,"SockType","","",null,null],[13,"Stream","","",38,null],[13,"Datagram","","",38,null],[13,"SeqPacket","","",38,null],[13,"Raw","","",38,null],[13,"Rdm","","",38,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may\nbe added to this enum; do not exhaustively pattern-match it.\n[Further reading](http://man7.org/linux/man-pages/man3/cmsg.3.html)",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file\ndescriptors passed between processes. See the description in the\n&quot;Ancillary messages&quot; section of the\n[unix(7) man page](http://man7.org/linux/man-pages/man7/unix.7.html).",39,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",40,null],[13,"Tcp","","",40,null],[13,"Ip","","",40,null],[13,"Ipv6","","",40,null],[13,"Udp","","",40,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",41,null],[13,"Write","","Further  transmissions will be disallowed.",41,null],[13,"Both","","Further receptions and transmissions will be disallowed.",41,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied\nby ancillary data. Optionally direct the message at the given address,\nas with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and\noptionally receive ancillary data into the provided buffer.\nIf no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",34,null],[11,"eq","","",34,null],[11,"fmt","","",34,null],[11,"hash","","",34,null],[11,"from_std","","",36,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",36,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",36,null],[11,"port","","Gets the port number associated with this socket address",36,null],[11,"to_std","","",36,null],[11,"to_str","","",36,null],[11,"eq","","",36,null],[11,"hash","","",36,null],[11,"clone","","",36,null],[11,"fmt","","",36,null],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",37,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",37,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",37,null],[11,"new","","",28,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",28,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",28,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",28,null],[11,"to_std","","",28,null],[11,"eq","","",28,null],[11,"hash","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",28,null],[11,"clone","","",29,null],[11,"new","","",29,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",29,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",29,null],[11,"to_std","","",29,null],[11,"fmt","","",29,null],[11,"new","","Create a new sockaddr_un representing a filesystem path.",27,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",27,null],[11,"path","","If this address represents a filesystem path, return that path.",27,null],[11,"eq","","",27,null],[11,"hash","","",27,null],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"new_inet","","",35,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",35,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",35,null],[11,"to_str","","",35,null],[11,"as_ffi_pair","","",35,null],[11,"eq","","",35,null],[11,"hash","","",35,null],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"partial_cmp","","",42,null],[11,"lt","","",42,null],[11,"le","","",42,null],[11,"gt","","",42,null],[11,"ge","","",42,null],[11,"cmp","","",42,null],[11,"hash","","",42,null],[11,"fmt","","",42,null],[11,"empty","","Returns an empty set of flags.",42,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",42,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",42,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",42,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",42,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",42,null],[11,"is_all","","Returns `true` if all flags are currently set.",42,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",42,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",42,null],[11,"insert","","Inserts the specified flags in-place.",42,null],[11,"remove","","Removes the specified flags in-place.",42,null],[11,"toggle","","Toggles the specified flags in-place.",42,null],[11,"bitor","","Returns the union of the two sets of flags.",42,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",42,null],[11,"bitand","","Returns the intersection between the two sets of flags.",42,null],[11,"sub","","Returns the set difference of the two sets of flags.",42,null],[11,"not","","Returns the complement of this set of flags.",42,null],[11,"from_iter","","",42,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"new","","",30,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",31,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"TcpKeepAlive","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"SockType","","",null,null],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"set","","",43,null],[11,"get","","",43,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"set","","",44,null],[11,"get","","",44,null],[11,"clone","","",45,null],[11,"fmt","","",45,null],[11,"set","","",45,null],[11,"get","","",45,null],[11,"clone","","",46,null],[11,"fmt","","",46,null],[11,"set","","",46,null],[11,"get","","",46,null],[11,"clone","","",47,null],[11,"fmt","","",47,null],[11,"set","","",47,null],[11,"clone","","",48,null],[11,"fmt","","",48,null],[11,"set","","",48,null],[11,"clone","","",49,null],[11,"fmt","","",49,null],[11,"set","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"set","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"set","","",51,null],[11,"get","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"set","","",52,null],[11,"get","","",52,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"set","","",53,null],[11,"get","","",53,null],[11,"clone","","",54,null],[11,"fmt","","",54,null],[11,"set","","",54,null],[11,"get","","",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"set","","",55,null],[11,"get","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"set","","",56,null],[11,"get","","",56,null],[11,"clone","","",57,null],[11,"fmt","","",57,null],[11,"get","","",57,null],[11,"clone","","",58,null],[11,"fmt","","",58,null],[11,"set","","",58,null],[11,"get","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"set","","",59,null],[11,"get","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"set","","",60,null],[11,"get","","",60,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"set","","",61,null],[11,"get","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"get","","",62,null],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_RESTRICTIONS","","",null,null],[17,"SO_RESTRICT_DENYIN","","",null,null],[17,"SO_RESTRICT_DENYOUT","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_RESTRICT_DENYSET","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",63,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",64,null],[11,"clone","","",38,null],[11,"eq","","",38,null],[11,"fmt","","",38,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"clone","","",65,null],[11,"partial_cmp","","",65,null],[11,"lt","","",65,null],[11,"le","","",65,null],[11,"gt","","",65,null],[11,"ge","","",65,null],[11,"cmp","","",65,null],[11,"hash","","",65,null],[11,"fmt","","",65,null],[11,"empty","","Returns an empty set of flags.",65,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",65,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",65,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",65,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",65,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",65,null],[11,"is_all","","Returns `true` if all flags are currently set.",65,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",65,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",65,null],[11,"insert","","Inserts the specified flags in-place.",65,null],[11,"remove","","Removes the specified flags in-place.",65,null],[11,"toggle","","Toggles the specified flags in-place.",65,null],[11,"bitor","","Returns the union of the two sets of flags.",65,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",65,null],[11,"bitand","","Returns the intersection between the two sets of flags.",65,null],[11,"sub","","Returns the set difference of the two sets of flags.",65,null],[11,"not","","Returns the complement of this set of flags.",65,null],[11,"from_iter","","",65,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",66,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",32,null],[11,"next","","",67,null],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"clone","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"fmt","","",68,null],[11,"clone","","",41,null],[11,"eq","","",41,null],[11,"fmt","","",41,null],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",69,null],[12,"st_mode","","",69,null],[12,"st_nlink","","",69,null],[12,"st_ino","","",69,null],[12,"st_uid","","",69,null],[12,"st_gid","","",69,null],[12,"st_rdev","","",69,null],[12,"st_atime","","",69,null],[12,"st_atime_nsec","","",69,null],[12,"st_mtime","","",69,null],[12,"st_mtime_nsec","","",69,null],[12,"st_ctime","","",69,null],[12,"st_ctime_nsec","","",69,null],[12,"st_birthtime","","",69,null],[12,"st_birthtime_nsec","","",69,null],[12,"st_size","","",69,null],[12,"st_blocks","","",69,null],[12,"st_blksize","","",69,null],[12,"st_flags","","",69,null],[12,"st_gen","","",69,null],[12,"st_lspare","","",69,null],[12,"st_qspare","","",69,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"partial_cmp","","",70,null],[11,"lt","","",70,null],[11,"le","","",70,null],[11,"gt","","",70,null],[11,"ge","","",70,null],[11,"cmp","","",70,null],[11,"hash","","",70,null],[11,"fmt","","",70,null],[11,"empty","","Returns an empty set of flags.",70,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",70,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",70,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",70,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",70,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",70,null],[11,"is_all","","Returns `true` if all flags are currently set.",70,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",70,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",70,null],[11,"insert","","Inserts the specified flags in-place.",70,null],[11,"remove","","Removes the specified flags in-place.",70,null],[11,"toggle","","Toggles the specified flags in-place.",70,null],[11,"bitor","","Returns the union of the two sets of flags.",70,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",70,null],[11,"bitand","","Returns the intersection between the two sets of flags.",70,null],[11,"sub","","Returns the set difference of the two sets of flags.",70,null],[11,"not","","Returns the complement of this set of flags.",70,null],[11,"from_iter","","",70,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"partial_cmp","","",71,null],[11,"lt","","",71,null],[11,"le","","",71,null],[11,"gt","","",71,null],[11,"ge","","",71,null],[11,"cmp","","",71,null],[11,"hash","","",71,null],[11,"fmt","","",71,null],[11,"empty","","Returns an empty set of flags.",71,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",71,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",71,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",71,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",71,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",71,null],[11,"is_all","","Returns `true` if all flags are currently set.",71,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",71,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",71,null],[11,"insert","","Inserts the specified flags in-place.",71,null],[11,"remove","","Removes the specified flags in-place.",71,null],[11,"toggle","","Toggles the specified flags in-place.",71,null],[11,"bitor","","Returns the union of the two sets of flags.",71,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",71,null],[11,"bitand","","Returns the intersection between the two sets of flags.",71,null],[11,"sub","","Returns the set difference of the two sets of flags.",71,null],[11,"not","","Returns the complement of this set of flags.",71,null],[11,"from_iter","","",71,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",72,null],[12,"c_oflag","","",72,null],[12,"c_cflag","","",72,null],[12,"c_lflag","","",72,null],[12,"c_cc","","",72,null],[12,"c_ispeed","","",72,null],[12,"c_ospeed","","",72,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",73,null],[13,"TCSADRAIN","","",73,null],[13,"TCSAFLUSH","","",73,null],[13,"TCSASOFT","","",73,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",74,null],[13,"TCOFLUSH","","",74,null],[13,"TCIOFLUSH","","",74,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",75,null],[13,"TCOON","","",75,null],[13,"TCIOFF","","",75,null],[13,"TCION","","",75,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",72,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"partial_cmp","","",76,null],[11,"lt","","",76,null],[11,"le","","",76,null],[11,"gt","","",76,null],[11,"ge","","",76,null],[11,"cmp","","",76,null],[11,"hash","","",76,null],[11,"fmt","","",76,null],[11,"empty","","Returns an empty set of flags.",76,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",76,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",76,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",76,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",76,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",76,null],[11,"is_all","","Returns `true` if all flags are currently set.",76,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",76,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",76,null],[11,"insert","","Inserts the specified flags in-place.",76,null],[11,"remove","","Removes the specified flags in-place.",76,null],[11,"toggle","","Toggles the specified flags in-place.",76,null],[11,"bitor","","Returns the union of the two sets of flags.",76,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",76,null],[11,"bitand","","Returns the intersection between the two sets of flags.",76,null],[11,"sub","","Returns the set difference of the two sets of flags.",76,null],[11,"not","","Returns the complement of this set of flags.",76,null],[11,"from_iter","","",76,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"partial_cmp","","",77,null],[11,"lt","","",77,null],[11,"le","","",77,null],[11,"gt","","",77,null],[11,"ge","","",77,null],[11,"cmp","","",77,null],[11,"hash","","",77,null],[11,"fmt","","",77,null],[11,"empty","","Returns an empty set of flags.",77,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",77,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",77,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",77,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",77,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",77,null],[11,"is_all","","Returns `true` if all flags are currently set.",77,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",77,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",77,null],[11,"insert","","Inserts the specified flags in-place.",77,null],[11,"remove","","Removes the specified flags in-place.",77,null],[11,"toggle","","Toggles the specified flags in-place.",77,null],[11,"bitor","","Returns the union of the two sets of flags.",77,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",77,null],[11,"bitand","","Returns the intersection between the two sets of flags.",77,null],[11,"sub","","Returns the set difference of the two sets of flags.",77,null],[11,"not","","Returns the complement of this set of flags.",77,null],[11,"from_iter","","",77,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"partial_cmp","","",78,null],[11,"lt","","",78,null],[11,"le","","",78,null],[11,"gt","","",78,null],[11,"ge","","",78,null],[11,"cmp","","",78,null],[11,"hash","","",78,null],[11,"fmt","","",78,null],[11,"empty","","Returns an empty set of flags.",78,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",78,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",78,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",78,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,null],[11,"is_all","","Returns `true` if all flags are currently set.",78,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,null],[11,"insert","","Inserts the specified flags in-place.",78,null],[11,"remove","","Removes the specified flags in-place.",78,null],[11,"toggle","","Toggles the specified flags in-place.",78,null],[11,"bitor","","Returns the union of the two sets of flags.",78,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,null],[11,"bitand","","Returns the intersection between the two sets of flags.",78,null],[11,"sub","","Returns the set difference of the two sets of flags.",78,null],[11,"not","","Returns the complement of this set of flags.",78,null],[11,"from_iter","","",78,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"clone","","",79,null],[11,"partial_cmp","","",79,null],[11,"lt","","",79,null],[11,"le","","",79,null],[11,"gt","","",79,null],[11,"ge","","",79,null],[11,"cmp","","",79,null],[11,"hash","","",79,null],[11,"fmt","","",79,null],[11,"empty","","Returns an empty set of flags.",79,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",79,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",79,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",79,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",79,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",79,null],[11,"is_all","","Returns `true` if all flags are currently set.",79,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79,null],[11,"insert","","Inserts the specified flags in-place.",79,null],[11,"remove","","Removes the specified flags in-place.",79,null],[11,"toggle","","Toggles the specified flags in-place.",79,null],[11,"bitor","","Returns the union of the two sets of flags.",79,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79,null],[11,"bitand","","Returns the intersection between the two sets of flags.",79,null],[11,"sub","","Returns the set difference of the two sets of flags.",79,null],[11,"not","","Returns the complement of this set of flags.",79,null],[11,"from_iter","","",79,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",73,null],[11,"clone","","",74,null],[11,"clone","","",75,null],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CCTS_OFLOW","","",null,null],[17,"CRTSCTS","","",null,null],[17,"CRTS_IFLOW","","",null,null],[17,"CDTR_IFLOW","","",null,null],[17,"CDSR_OFLOW","","",null,null],[17,"CCAR_OFLOW","","",null,null],[17,"MDMBUF","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"NL2","","",null,null],[17,"NL3","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",80,null],[13,"Signaled","","",80,null],[13,"Stopped","","",80,null],[13,"Continued","","",80,null],[13,"StillAlive","","",80,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"clone","","",81,null],[11,"partial_cmp","","",81,null],[11,"lt","","",81,null],[11,"le","","",81,null],[11,"gt","","",81,null],[11,"ge","","",81,null],[11,"cmp","","",81,null],[11,"hash","","",81,null],[11,"fmt","","",81,null],[11,"empty","","Returns an empty set of flags.",81,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",81,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",81,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",81,null],[11,"is_all","","Returns `true` if all flags are currently set.",81,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",81,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",81,null],[11,"insert","","Inserts the specified flags in-place.",81,null],[11,"remove","","Removes the specified flags in-place.",81,null],[11,"toggle","","Toggles the specified flags in-place.",81,null],[11,"bitor","","Returns the union of the two sets of flags.",81,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",81,null],[11,"bitand","","Returns the intersection between the two sets of flags.",81,null],[11,"sub","","Returns the set difference of the two sets of flags.",81,null],[11,"not","","Returns the complement of this set of flags.",81,null],[11,"from_iter","","",81,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"fmt","","",80,null],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap&#39;d region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"partial_cmp","","",82,null],[11,"lt","","",82,null],[11,"le","","",82,null],[11,"gt","","",82,null],[11,"ge","","",82,null],[11,"cmp","","",82,null],[11,"hash","","",82,null],[11,"fmt","","",82,null],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,null],[11,"is_all","","Returns `true` if all flags are currently set.",82,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,null],[11,"insert","","Inserts the specified flags in-place.",82,null],[11,"remove","","Removes the specified flags in-place.",82,null],[11,"toggle","","Toggles the specified flags in-place.",82,null],[11,"bitor","","Returns the union of the two sets of flags.",82,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,null],[11,"bitand","","Returns the intersection between the two sets of flags.",82,null],[11,"sub","","Returns the set difference of the two sets of flags.",82,null],[11,"not","","Returns the complement of this set of flags.",82,null],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"cmp","","",83,null],[11,"hash","","",83,null],[11,"fmt","","",83,null],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",83,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,null],[11,"is_all","","Returns `true` if all flags are currently set.",83,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,null],[11,"insert","","Inserts the specified flags in-place.",83,null],[11,"remove","","Removes the specified flags in-place.",83,null],[11,"toggle","","Toggles the specified flags in-place.",83,null],[11,"bitor","","Returns the union of the two sets of flags.",83,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,null],[11,"bitand","","Returns the intersection between the two sets of flags.",83,null],[11,"sub","","Returns the set difference of the two sets of flags.",83,null],[11,"not","","Returns the complement of this set of flags.",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"partial_cmp","","",84,null],[11,"lt","","",84,null],[11,"le","","",84,null],[11,"gt","","",84,null],[11,"ge","","",84,null],[11,"cmp","","",84,null],[11,"hash","","",84,null],[11,"fmt","","",84,null],[11,"empty","","Returns an empty set of flags.",84,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",84,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",84,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",84,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,null],[11,"is_all","","Returns `true` if all flags are currently set.",84,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,null],[11,"insert","","Inserts the specified flags in-place.",84,null],[11,"remove","","Removes the specified flags in-place.",84,null],[11,"toggle","","Toggles the specified flags in-place.",84,null],[11,"bitor","","Returns the union of the two sets of flags.",84,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,null],[11,"bitand","","Returns the intersection between the two sets of flags.",84,null],[11,"sub","","Returns the set difference of the two sets of flags.",84,null],[11,"not","","Returns the complement of this set of flags.",84,null],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",85,null],[11,"from_slice","","",85,null],[11,"from_mut_slice","","",85,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",86,null],[12,"tv_usec","","",86,null],[11,"clone","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"partial_cmp","","",86,null],[11,"lt","","",86,null],[11,"le","","",86,null],[11,"gt","","",86,null],[11,"ge","","",86,null],[11,"cmp","","",86,null],[11,"fmt","","",86,null],[11,"zero","","",86,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",86,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",86,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",86,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",86,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",86,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",86,null],[11,"num_minutes","","",86,null],[11,"num_seconds","","",86,null],[11,"num_milliseconds","","",86,null],[11,"num_microseconds","","",86,null],[11,"neg","","",86,null],[11,"add","","",86,null],[11,"sub","","",86,null],[11,"mul","","",86,null],[11,"div","","",86,null],[11,"fmt","","",86,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",87,null],[11,"new","","",87,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",87,null],[11,"remove","","",87,null],[11,"contains","","",87,null],[11,"clear","","",87,null],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to\nmost efficient use of the filesystem",88,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this\nfilesystem",88,null],[12,"f_blocks","","Total number of blocks on the filesystem",88,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those\nreserved for root",88,null],[12,"f_bavail","","Number of blocks available to non-root users",88,null],[12,"f_files","","Total number of inodes available on the filesystem",88,null],[12,"f_ffree","","Number of inodes available on the filesystem",88,null],[12,"f_favail","","Number of inodes available to non-root users",88,null],[12,"f_fsid","","File System ID",88,null],[12,"f_flag","","Mount Flags",88,null],[12,"f_namemax","","Maximum filename length",88,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"cmp","","",89,null],[11,"hash","","",89,null],[11,"default","","",89,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",89,null],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",89,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,null],[11,"is_all","","Returns `true` if all flags are currently set.",89,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,null],[11,"insert","","Inserts the specified flags in-place.",89,null],[11,"remove","","Removes the specified flags in-place.",89,null],[11,"toggle","","Toggles the specified flags in-place.",89,null],[11,"bitor","","Returns the union of the two sets of flags.",89,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,null],[11,"bitand","","Returns the intersection between the two sets of flags.",89,null],[11,"sub","","Returns the set difference of the two sets of flags.",89,null],[11,"not","","Returns the complement of this set of flags.",89,null],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",88,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",88,null],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",88,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",88,null],[11,"default","","Create a statvfs object initialized to all zeros",88,{"inputs":[],"output":{"name":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"ForkResult","nix::unistd","",null,null],[13,"Parent","","",90,null],[12,"child","nix::unistd::ForkResult","",90,null],[13,"Child","nix::unistd","",90,null],[4,"Whence","","",null,null],[13,"SeekSet","","",91,null],[13,"SeekCur","","",91,null],[13,"SeekEnd","","",91,null],[13,"SeekData","","",91,null],[13,"SeekHole","","",91,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"mkdir","","Creates new directory `path` with access rights `mode`.",null,{"inputs":[{"name":"p"},{"name":"mode"}],"output":{"name":"result"}}],[5,"getcwd","","Returns the current directory as a PathBuf",null,{"inputs":[],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"},{"name":"whence"}],"output":{"name":"result"}}],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[5,"pause","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"sleep","","",null,{"inputs":[{"name":"c_uint"}],"output":{"name":"c_uint"}}],[11,"clone","","",90,null],[11,"is_child","","",90,null],[11,"is_parent","","",90,null],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",92,null],[10,"with_nix_path","","",92,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"from_errno","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",1,null],[11,"from","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",1,null],[11,"fmt","","",1,null],[11,"clone","nix::sys::socket","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","nix::sys::stat","",69,null],[11,"clone","nix::sys::socket","",23,null]],"paths":[[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[4,"FcntlArg"],[4,"FlockArg"],[3,"OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"KEvent"],[4,"EventFilter"],[3,"EventFlag"],[3,"FilterFlag"],[4,"Signal"],[4,"SigHandler"],[3,"SignalIterator"],[3,"SaFlags"],[3,"SigFlags"],[3,"SigSet"],[3,"SigAction"],[3,"in_addr"],[3,"in6_addr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepAlive"],[3,"RcvBuf"],[3,"SndBuf"],[3,"SockType"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"Statvfs"],[3,"FsFlags"],[4,"ForkResult"],[4,"Whence"],[8,"NixPath"]]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An &quot;in progress&quot; TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An &quot;in progress&quot; UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM`\ntype, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM`\ntype, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,null],[11,"listen","","Mark a socket as ready to accept incoming connection requests using\naccept()",0,null],[11,"connect","","Initiate a connection on this socket to the specified address.",0,null],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,null],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,null],[11,"fmt","","",0,null],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM`\ntype, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM`\ntype, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,null],[11,"fmt","","",1,null],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,null],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,null],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,null],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,null],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,null],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,null],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,null],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,null],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,null],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,null],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,null],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,null],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,null],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,null],[11,"reuse_port","net2","",0,null],[11,"get_reuse_port","","",0,null],[11,"reuse_port","","",1,null],[11,"get_reuse_port","","",1,null],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,null],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,null],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,null],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,null],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,null],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,null],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so\nthe amount of milliseconds between them.",4,null],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,null],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so\nthe duration of time between them.",4,null],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,null],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,null],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,null],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,null],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,null],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,null],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,null],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,null],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,null],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,null],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,null],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection\nto the host specified by `addr`.",4,null],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,null],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,null],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,null],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,null],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,null],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,null],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,null],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,null],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,null],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,null],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,null],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,null],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,null],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,null],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,null],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,null],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,null],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,null],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,null],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,null],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,null],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,null],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,null],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,null],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,null],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,null],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,null],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,null],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,null],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,null],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,null],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,null],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,null],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,null],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,null],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,null],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,null],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,null],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,null],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,null],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",6,null],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,null],[10,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",6,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,null]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["protobuf"] = {"doc":"","items":[[3,"UnknownFields","protobuf","",null,null],[12,"fields","","",0,null],[3,"UnknownFieldsIter","","",null,null],[3,"UnknownValues","","",null,null],[12,"fixed32","","",1,null],[12,"fixed64","","",1,null],[12,"varint","","",1,null],[12,"length_delimited","","",1,null],[3,"UnknownValuesIter","","",null,null],[4,"UnknownValue","","",null,null],[13,"Fixed32","","",2,null],[13,"Fixed64","","",2,null],[13,"Varint","","",2,null],[13,"LengthDelimited","","",2,null],[4,"UnknownValueRef","","",null,null],[13,"Fixed32","","",3,null],[13,"Fixed64","","",3,null],[13,"Varint","","",3,null],[13,"LengthDelimited","","",3,null],[0,"descriptor","","",null,null],[3,"FileDescriptorSet","protobuf::descriptor","",null,null],[3,"FileDescriptorProto","","",null,null],[3,"DescriptorProto","","",null,null],[3,"DescriptorProto_ExtensionRange","","",null,null],[3,"DescriptorProto_ReservedRange","","",null,null],[3,"FieldDescriptorProto","","",null,null],[3,"OneofDescriptorProto","","",null,null],[3,"EnumDescriptorProto","","",null,null],[3,"EnumValueDescriptorProto","","",null,null],[3,"ServiceDescriptorProto","","",null,null],[3,"MethodDescriptorProto","","",null,null],[3,"FileOptions","","",null,null],[3,"MessageOptions","","",null,null],[3,"FieldOptions","","",null,null],[3,"OneofOptions","","",null,null],[3,"EnumOptions","","",null,null],[3,"EnumValueOptions","","",null,null],[3,"ServiceOptions","","",null,null],[3,"MethodOptions","","",null,null],[3,"UninterpretedOption","","",null,null],[3,"UninterpretedOption_NamePart","","",null,null],[3,"SourceCodeInfo","","",null,null],[3,"SourceCodeInfo_Location","","",null,null],[3,"GeneratedCodeInfo","","",null,null],[3,"GeneratedCodeInfo_Annotation","","",null,null],[4,"FieldDescriptorProto_Type","","",null,null],[13,"TYPE_DOUBLE","","",4,null],[13,"TYPE_FLOAT","","",4,null],[13,"TYPE_INT64","","",4,null],[13,"TYPE_UINT64","","",4,null],[13,"TYPE_INT32","","",4,null],[13,"TYPE_FIXED64","","",4,null],[13,"TYPE_FIXED32","","",4,null],[13,"TYPE_BOOL","","",4,null],[13,"TYPE_STRING","","",4,null],[13,"TYPE_GROUP","","",4,null],[13,"TYPE_MESSAGE","","",4,null],[13,"TYPE_BYTES","","",4,null],[13,"TYPE_UINT32","","",4,null],[13,"TYPE_ENUM","","",4,null],[13,"TYPE_SFIXED32","","",4,null],[13,"TYPE_SFIXED64","","",4,null],[13,"TYPE_SINT32","","",4,null],[13,"TYPE_SINT64","","",4,null],[4,"FieldDescriptorProto_Label","","",null,null],[13,"LABEL_OPTIONAL","","",5,null],[13,"LABEL_REQUIRED","","",5,null],[13,"LABEL_REPEATED","","",5,null],[4,"FileOptions_OptimizeMode","","",null,null],[13,"SPEED","","",6,null],[13,"CODE_SIZE","","",6,null],[13,"LITE_RUNTIME","","",6,null],[4,"FieldOptions_CType","","",null,null],[13,"STRING","","",7,null],[13,"CORD","","",7,null],[13,"STRING_PIECE","","",7,null],[4,"FieldOptions_JSType","","",null,null],[13,"JS_NORMAL","","",8,null],[13,"JS_STRING","","",8,null],[13,"JS_NUMBER","","",8,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"clone","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"default_instance","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"clear_file","","",9,null],[11,"set_file","","",9,null],[11,"mut_file","","",9,null],[11,"take_file","","",9,null],[11,"get_file","","",9,null],[11,"is_initialized","","",9,null],[11,"merge_from","","",9,null],[11,"compute_size","","",9,null],[11,"write_to_with_cached_sizes","","",9,null],[11,"get_cached_size","","",9,null],[11,"get_unknown_fields","","",9,null],[11,"mut_unknown_fields","","",9,null],[11,"type_id","","",9,null],[11,"as_any","","",9,null],[11,"descriptor","","",9,null],[11,"new","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"descriptor_static","","",9,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",9,null],[11,"eq","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"default_instance","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"clear_name","","",10,null],[11,"has_name","","",10,null],[11,"set_name","","",10,null],[11,"mut_name","","",10,null],[11,"take_name","","",10,null],[11,"get_name","","",10,null],[11,"clear_package","","",10,null],[11,"has_package","","",10,null],[11,"set_package","","",10,null],[11,"mut_package","","",10,null],[11,"take_package","","",10,null],[11,"get_package","","",10,null],[11,"clear_dependency","","",10,null],[11,"set_dependency","","",10,null],[11,"mut_dependency","","",10,null],[11,"take_dependency","","",10,null],[11,"get_dependency","","",10,null],[11,"clear_public_dependency","","",10,null],[11,"set_public_dependency","","",10,null],[11,"mut_public_dependency","","",10,null],[11,"take_public_dependency","","",10,null],[11,"get_public_dependency","","",10,null],[11,"clear_weak_dependency","","",10,null],[11,"set_weak_dependency","","",10,null],[11,"mut_weak_dependency","","",10,null],[11,"take_weak_dependency","","",10,null],[11,"get_weak_dependency","","",10,null],[11,"clear_message_type","","",10,null],[11,"set_message_type","","",10,null],[11,"mut_message_type","","",10,null],[11,"take_message_type","","",10,null],[11,"get_message_type","","",10,null],[11,"clear_enum_type","","",10,null],[11,"set_enum_type","","",10,null],[11,"mut_enum_type","","",10,null],[11,"take_enum_type","","",10,null],[11,"get_enum_type","","",10,null],[11,"clear_service","","",10,null],[11,"set_service","","",10,null],[11,"mut_service","","",10,null],[11,"take_service","","",10,null],[11,"get_service","","",10,null],[11,"clear_extension","","",10,null],[11,"set_extension","","",10,null],[11,"mut_extension","","",10,null],[11,"take_extension","","",10,null],[11,"get_extension","","",10,null],[11,"clear_options","","",10,null],[11,"has_options","","",10,null],[11,"set_options","","",10,null],[11,"mut_options","","",10,null],[11,"take_options","","",10,null],[11,"get_options","","",10,null],[11,"clear_source_code_info","","",10,null],[11,"has_source_code_info","","",10,null],[11,"set_source_code_info","","",10,null],[11,"mut_source_code_info","","",10,null],[11,"take_source_code_info","","",10,null],[11,"get_source_code_info","","",10,null],[11,"clear_syntax","","",10,null],[11,"has_syntax","","",10,null],[11,"set_syntax","","",10,null],[11,"mut_syntax","","",10,null],[11,"take_syntax","","",10,null],[11,"get_syntax","","",10,null],[11,"is_initialized","","",10,null],[11,"merge_from","","",10,null],[11,"compute_size","","",10,null],[11,"write_to_with_cached_sizes","","",10,null],[11,"get_cached_size","","",10,null],[11,"get_unknown_fields","","",10,null],[11,"mut_unknown_fields","","",10,null],[11,"type_id","","",10,null],[11,"as_any","","",10,null],[11,"descriptor","","",10,null],[11,"new","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"descriptor_static","","",10,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"default_instance","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"clear_name","","",11,null],[11,"has_name","","",11,null],[11,"set_name","","",11,null],[11,"mut_name","","",11,null],[11,"take_name","","",11,null],[11,"get_name","","",11,null],[11,"clear_field","","",11,null],[11,"set_field","","",11,null],[11,"mut_field","","",11,null],[11,"take_field","","",11,null],[11,"get_field","","",11,null],[11,"clear_extension","","",11,null],[11,"set_extension","","",11,null],[11,"mut_extension","","",11,null],[11,"take_extension","","",11,null],[11,"get_extension","","",11,null],[11,"clear_nested_type","","",11,null],[11,"set_nested_type","","",11,null],[11,"mut_nested_type","","",11,null],[11,"take_nested_type","","",11,null],[11,"get_nested_type","","",11,null],[11,"clear_enum_type","","",11,null],[11,"set_enum_type","","",11,null],[11,"mut_enum_type","","",11,null],[11,"take_enum_type","","",11,null],[11,"get_enum_type","","",11,null],[11,"clear_extension_range","","",11,null],[11,"set_extension_range","","",11,null],[11,"mut_extension_range","","",11,null],[11,"take_extension_range","","",11,null],[11,"get_extension_range","","",11,null],[11,"clear_oneof_decl","","",11,null],[11,"set_oneof_decl","","",11,null],[11,"mut_oneof_decl","","",11,null],[11,"take_oneof_decl","","",11,null],[11,"get_oneof_decl","","",11,null],[11,"clear_options","","",11,null],[11,"has_options","","",11,null],[11,"set_options","","",11,null],[11,"mut_options","","",11,null],[11,"take_options","","",11,null],[11,"get_options","","",11,null],[11,"clear_reserved_range","","",11,null],[11,"set_reserved_range","","",11,null],[11,"mut_reserved_range","","",11,null],[11,"take_reserved_range","","",11,null],[11,"get_reserved_range","","",11,null],[11,"clear_reserved_name","","",11,null],[11,"set_reserved_name","","",11,null],[11,"mut_reserved_name","","",11,null],[11,"take_reserved_name","","",11,null],[11,"get_reserved_name","","",11,null],[11,"is_initialized","","",11,null],[11,"merge_from","","",11,null],[11,"compute_size","","",11,null],[11,"write_to_with_cached_sizes","","",11,null],[11,"get_cached_size","","",11,null],[11,"get_unknown_fields","","",11,null],[11,"mut_unknown_fields","","",11,null],[11,"type_id","","",11,null],[11,"as_any","","",11,null],[11,"descriptor","","",11,null],[11,"new","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"descriptor_static","","",11,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",11,null],[11,"eq","","",11,null],[11,"fmt","","",11,null],[11,"clone","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"default_instance","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"clear_start","","",12,null],[11,"has_start","","",12,null],[11,"set_start","","",12,null],[11,"get_start","","",12,null],[11,"clear_end","","",12,null],[11,"has_end","","",12,null],[11,"set_end","","",12,null],[11,"get_end","","",12,null],[11,"is_initialized","","",12,null],[11,"merge_from","","",12,null],[11,"compute_size","","",12,null],[11,"write_to_with_cached_sizes","","",12,null],[11,"get_cached_size","","",12,null],[11,"get_unknown_fields","","",12,null],[11,"mut_unknown_fields","","",12,null],[11,"type_id","","",12,null],[11,"as_any","","",12,null],[11,"descriptor","","",12,null],[11,"new","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"descriptor_static","","",12,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",12,null],[11,"eq","","",12,null],[11,"fmt","","",12,null],[11,"clone","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"default_instance","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"clear_start","","",13,null],[11,"has_start","","",13,null],[11,"set_start","","",13,null],[11,"get_start","","",13,null],[11,"clear_end","","",13,null],[11,"has_end","","",13,null],[11,"set_end","","",13,null],[11,"get_end","","",13,null],[11,"is_initialized","","",13,null],[11,"merge_from","","",13,null],[11,"compute_size","","",13,null],[11,"write_to_with_cached_sizes","","",13,null],[11,"get_cached_size","","",13,null],[11,"get_unknown_fields","","",13,null],[11,"mut_unknown_fields","","",13,null],[11,"type_id","","",13,null],[11,"as_any","","",13,null],[11,"descriptor","","",13,null],[11,"new","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"descriptor_static","","",13,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",13,null],[11,"eq","","",13,null],[11,"fmt","","",13,null],[11,"clone","","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"default_instance","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"clear_name","","",14,null],[11,"has_name","","",14,null],[11,"set_name","","",14,null],[11,"mut_name","","",14,null],[11,"take_name","","",14,null],[11,"get_name","","",14,null],[11,"clear_number","","",14,null],[11,"has_number","","",14,null],[11,"set_number","","",14,null],[11,"get_number","","",14,null],[11,"clear_label","","",14,null],[11,"has_label","","",14,null],[11,"set_label","","",14,null],[11,"get_label","","",14,null],[11,"clear_field_type","","",14,null],[11,"has_field_type","","",14,null],[11,"set_field_type","","",14,null],[11,"get_field_type","","",14,null],[11,"clear_type_name","","",14,null],[11,"has_type_name","","",14,null],[11,"set_type_name","","",14,null],[11,"mut_type_name","","",14,null],[11,"take_type_name","","",14,null],[11,"get_type_name","","",14,null],[11,"clear_extendee","","",14,null],[11,"has_extendee","","",14,null],[11,"set_extendee","","",14,null],[11,"mut_extendee","","",14,null],[11,"take_extendee","","",14,null],[11,"get_extendee","","",14,null],[11,"clear_default_value","","",14,null],[11,"has_default_value","","",14,null],[11,"set_default_value","","",14,null],[11,"mut_default_value","","",14,null],[11,"take_default_value","","",14,null],[11,"get_default_value","","",14,null],[11,"clear_oneof_index","","",14,null],[11,"has_oneof_index","","",14,null],[11,"set_oneof_index","","",14,null],[11,"get_oneof_index","","",14,null],[11,"clear_json_name","","",14,null],[11,"has_json_name","","",14,null],[11,"set_json_name","","",14,null],[11,"mut_json_name","","",14,null],[11,"take_json_name","","",14,null],[11,"get_json_name","","",14,null],[11,"clear_options","","",14,null],[11,"has_options","","",14,null],[11,"set_options","","",14,null],[11,"mut_options","","",14,null],[11,"take_options","","",14,null],[11,"get_options","","",14,null],[11,"is_initialized","","",14,null],[11,"merge_from","","",14,null],[11,"compute_size","","",14,null],[11,"write_to_with_cached_sizes","","",14,null],[11,"get_cached_size","","",14,null],[11,"get_unknown_fields","","",14,null],[11,"mut_unknown_fields","","",14,null],[11,"type_id","","",14,null],[11,"as_any","","",14,null],[11,"descriptor","","",14,null],[11,"new","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"descriptor_static","","",14,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",14,null],[11,"eq","","",14,null],[11,"fmt","","",14,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"fmt","","",4,null],[11,"hash","","",4,null],[11,"value","","",4,null],[11,"from_i32","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",4,null],[11,"enum_descriptor_static","","",4,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"hash","","",5,null],[11,"value","","",5,null],[11,"from_i32","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",5,null],[11,"enum_descriptor_static","","",5,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"clone","","",15,null],[11,"default","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"default_instance","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"clear_name","","",15,null],[11,"has_name","","",15,null],[11,"set_name","","",15,null],[11,"mut_name","","",15,null],[11,"take_name","","",15,null],[11,"get_name","","",15,null],[11,"clear_options","","",15,null],[11,"has_options","","",15,null],[11,"set_options","","",15,null],[11,"mut_options","","",15,null],[11,"take_options","","",15,null],[11,"get_options","","",15,null],[11,"is_initialized","","",15,null],[11,"merge_from","","",15,null],[11,"compute_size","","",15,null],[11,"write_to_with_cached_sizes","","",15,null],[11,"get_cached_size","","",15,null],[11,"get_unknown_fields","","",15,null],[11,"mut_unknown_fields","","",15,null],[11,"type_id","","",15,null],[11,"as_any","","",15,null],[11,"descriptor","","",15,null],[11,"new","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"descriptor_static","","",15,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",15,null],[11,"eq","","",15,null],[11,"fmt","","",15,null],[11,"clone","","",16,null],[11,"default","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"default_instance","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"clear_name","","",16,null],[11,"has_name","","",16,null],[11,"set_name","","",16,null],[11,"mut_name","","",16,null],[11,"take_name","","",16,null],[11,"get_name","","",16,null],[11,"clear_value","","",16,null],[11,"set_value","","",16,null],[11,"mut_value","","",16,null],[11,"take_value","","",16,null],[11,"get_value","","",16,null],[11,"clear_options","","",16,null],[11,"has_options","","",16,null],[11,"set_options","","",16,null],[11,"mut_options","","",16,null],[11,"take_options","","",16,null],[11,"get_options","","",16,null],[11,"is_initialized","","",16,null],[11,"merge_from","","",16,null],[11,"compute_size","","",16,null],[11,"write_to_with_cached_sizes","","",16,null],[11,"get_cached_size","","",16,null],[11,"get_unknown_fields","","",16,null],[11,"mut_unknown_fields","","",16,null],[11,"type_id","","",16,null],[11,"as_any","","",16,null],[11,"descriptor","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"descriptor_static","","",16,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",16,null],[11,"eq","","",16,null],[11,"fmt","","",16,null],[11,"clone","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"default_instance","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"clear_name","","",17,null],[11,"has_name","","",17,null],[11,"set_name","","",17,null],[11,"mut_name","","",17,null],[11,"take_name","","",17,null],[11,"get_name","","",17,null],[11,"clear_number","","",17,null],[11,"has_number","","",17,null],[11,"set_number","","",17,null],[11,"get_number","","",17,null],[11,"clear_options","","",17,null],[11,"has_options","","",17,null],[11,"set_options","","",17,null],[11,"mut_options","","",17,null],[11,"take_options","","",17,null],[11,"get_options","","",17,null],[11,"is_initialized","","",17,null],[11,"merge_from","","",17,null],[11,"compute_size","","",17,null],[11,"write_to_with_cached_sizes","","",17,null],[11,"get_cached_size","","",17,null],[11,"get_unknown_fields","","",17,null],[11,"mut_unknown_fields","","",17,null],[11,"type_id","","",17,null],[11,"as_any","","",17,null],[11,"descriptor","","",17,null],[11,"new","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"descriptor_static","","",17,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",17,null],[11,"eq","","",17,null],[11,"fmt","","",17,null],[11,"clone","","",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"default_instance","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"clear_name","","",18,null],[11,"has_name","","",18,null],[11,"set_name","","",18,null],[11,"mut_name","","",18,null],[11,"take_name","","",18,null],[11,"get_name","","",18,null],[11,"clear_method","","",18,null],[11,"set_method","","",18,null],[11,"mut_method","","",18,null],[11,"take_method","","",18,null],[11,"get_method","","",18,null],[11,"clear_options","","",18,null],[11,"has_options","","",18,null],[11,"set_options","","",18,null],[11,"mut_options","","",18,null],[11,"take_options","","",18,null],[11,"get_options","","",18,null],[11,"is_initialized","","",18,null],[11,"merge_from","","",18,null],[11,"compute_size","","",18,null],[11,"write_to_with_cached_sizes","","",18,null],[11,"get_cached_size","","",18,null],[11,"get_unknown_fields","","",18,null],[11,"mut_unknown_fields","","",18,null],[11,"type_id","","",18,null],[11,"as_any","","",18,null],[11,"descriptor","","",18,null],[11,"new","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"descriptor_static","","",18,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",18,null],[11,"eq","","",18,null],[11,"fmt","","",18,null],[11,"clone","","",19,null],[11,"default","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"default_instance","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"clear_name","","",19,null],[11,"has_name","","",19,null],[11,"set_name","","",19,null],[11,"mut_name","","",19,null],[11,"take_name","","",19,null],[11,"get_name","","",19,null],[11,"clear_input_type","","",19,null],[11,"has_input_type","","",19,null],[11,"set_input_type","","",19,null],[11,"mut_input_type","","",19,null],[11,"take_input_type","","",19,null],[11,"get_input_type","","",19,null],[11,"clear_output_type","","",19,null],[11,"has_output_type","","",19,null],[11,"set_output_type","","",19,null],[11,"mut_output_type","","",19,null],[11,"take_output_type","","",19,null],[11,"get_output_type","","",19,null],[11,"clear_options","","",19,null],[11,"has_options","","",19,null],[11,"set_options","","",19,null],[11,"mut_options","","",19,null],[11,"take_options","","",19,null],[11,"get_options","","",19,null],[11,"clear_client_streaming","","",19,null],[11,"has_client_streaming","","",19,null],[11,"set_client_streaming","","",19,null],[11,"get_client_streaming","","",19,null],[11,"clear_server_streaming","","",19,null],[11,"has_server_streaming","","",19,null],[11,"set_server_streaming","","",19,null],[11,"get_server_streaming","","",19,null],[11,"is_initialized","","",19,null],[11,"merge_from","","",19,null],[11,"compute_size","","",19,null],[11,"write_to_with_cached_sizes","","",19,null],[11,"get_cached_size","","",19,null],[11,"get_unknown_fields","","",19,null],[11,"mut_unknown_fields","","",19,null],[11,"type_id","","",19,null],[11,"as_any","","",19,null],[11,"descriptor","","",19,null],[11,"new","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"descriptor_static","","",19,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",19,null],[11,"eq","","",19,null],[11,"fmt","","",19,null],[11,"clone","","",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"default_instance","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"clear_java_package","","",20,null],[11,"has_java_package","","",20,null],[11,"set_java_package","","",20,null],[11,"mut_java_package","","",20,null],[11,"take_java_package","","",20,null],[11,"get_java_package","","",20,null],[11,"clear_java_outer_classname","","",20,null],[11,"has_java_outer_classname","","",20,null],[11,"set_java_outer_classname","","",20,null],[11,"mut_java_outer_classname","","",20,null],[11,"take_java_outer_classname","","",20,null],[11,"get_java_outer_classname","","",20,null],[11,"clear_java_multiple_files","","",20,null],[11,"has_java_multiple_files","","",20,null],[11,"set_java_multiple_files","","",20,null],[11,"get_java_multiple_files","","",20,null],[11,"clear_java_generate_equals_and_hash","","",20,null],[11,"has_java_generate_equals_and_hash","","",20,null],[11,"set_java_generate_equals_and_hash","","",20,null],[11,"get_java_generate_equals_and_hash","","",20,null],[11,"clear_java_string_check_utf8","","",20,null],[11,"has_java_string_check_utf8","","",20,null],[11,"set_java_string_check_utf8","","",20,null],[11,"get_java_string_check_utf8","","",20,null],[11,"clear_optimize_for","","",20,null],[11,"has_optimize_for","","",20,null],[11,"set_optimize_for","","",20,null],[11,"get_optimize_for","","",20,null],[11,"clear_go_package","","",20,null],[11,"has_go_package","","",20,null],[11,"set_go_package","","",20,null],[11,"mut_go_package","","",20,null],[11,"take_go_package","","",20,null],[11,"get_go_package","","",20,null],[11,"clear_cc_generic_services","","",20,null],[11,"has_cc_generic_services","","",20,null],[11,"set_cc_generic_services","","",20,null],[11,"get_cc_generic_services","","",20,null],[11,"clear_java_generic_services","","",20,null],[11,"has_java_generic_services","","",20,null],[11,"set_java_generic_services","","",20,null],[11,"get_java_generic_services","","",20,null],[11,"clear_py_generic_services","","",20,null],[11,"has_py_generic_services","","",20,null],[11,"set_py_generic_services","","",20,null],[11,"get_py_generic_services","","",20,null],[11,"clear_deprecated","","",20,null],[11,"has_deprecated","","",20,null],[11,"set_deprecated","","",20,null],[11,"get_deprecated","","",20,null],[11,"clear_cc_enable_arenas","","",20,null],[11,"has_cc_enable_arenas","","",20,null],[11,"set_cc_enable_arenas","","",20,null],[11,"get_cc_enable_arenas","","",20,null],[11,"clear_objc_class_prefix","","",20,null],[11,"has_objc_class_prefix","","",20,null],[11,"set_objc_class_prefix","","",20,null],[11,"mut_objc_class_prefix","","",20,null],[11,"take_objc_class_prefix","","",20,null],[11,"get_objc_class_prefix","","",20,null],[11,"clear_csharp_namespace","","",20,null],[11,"has_csharp_namespace","","",20,null],[11,"set_csharp_namespace","","",20,null],[11,"mut_csharp_namespace","","",20,null],[11,"take_csharp_namespace","","",20,null],[11,"get_csharp_namespace","","",20,null],[11,"clear_uninterpreted_option","","",20,null],[11,"set_uninterpreted_option","","",20,null],[11,"mut_uninterpreted_option","","",20,null],[11,"take_uninterpreted_option","","",20,null],[11,"get_uninterpreted_option","","",20,null],[11,"is_initialized","","",20,null],[11,"merge_from","","",20,null],[11,"compute_size","","",20,null],[11,"write_to_with_cached_sizes","","",20,null],[11,"get_cached_size","","",20,null],[11,"get_unknown_fields","","",20,null],[11,"mut_unknown_fields","","",20,null],[11,"type_id","","",20,null],[11,"as_any","","",20,null],[11,"descriptor","","",20,null],[11,"new","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"descriptor_static","","",20,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",20,null],[11,"eq","","",20,null],[11,"fmt","","",20,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"fmt","","",6,null],[11,"hash","","",6,null],[11,"value","","",6,null],[11,"from_i32","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",6,null],[11,"enum_descriptor_static","","",6,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"clone","","",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"default_instance","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"clear_message_set_wire_format","","",21,null],[11,"has_message_set_wire_format","","",21,null],[11,"set_message_set_wire_format","","",21,null],[11,"get_message_set_wire_format","","",21,null],[11,"clear_no_standard_descriptor_accessor","","",21,null],[11,"has_no_standard_descriptor_accessor","","",21,null],[11,"set_no_standard_descriptor_accessor","","",21,null],[11,"get_no_standard_descriptor_accessor","","",21,null],[11,"clear_deprecated","","",21,null],[11,"has_deprecated","","",21,null],[11,"set_deprecated","","",21,null],[11,"get_deprecated","","",21,null],[11,"clear_map_entry","","",21,null],[11,"has_map_entry","","",21,null],[11,"set_map_entry","","",21,null],[11,"get_map_entry","","",21,null],[11,"clear_uninterpreted_option","","",21,null],[11,"set_uninterpreted_option","","",21,null],[11,"mut_uninterpreted_option","","",21,null],[11,"take_uninterpreted_option","","",21,null],[11,"get_uninterpreted_option","","",21,null],[11,"is_initialized","","",21,null],[11,"merge_from","","",21,null],[11,"compute_size","","",21,null],[11,"write_to_with_cached_sizes","","",21,null],[11,"get_cached_size","","",21,null],[11,"get_unknown_fields","","",21,null],[11,"mut_unknown_fields","","",21,null],[11,"type_id","","",21,null],[11,"as_any","","",21,null],[11,"descriptor","","",21,null],[11,"new","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"descriptor_static","","",21,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",21,null],[11,"eq","","",21,null],[11,"fmt","","",21,null],[11,"clone","","",22,null],[11,"default","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"default_instance","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"clear_ctype","","",22,null],[11,"has_ctype","","",22,null],[11,"set_ctype","","",22,null],[11,"get_ctype","","",22,null],[11,"clear_packed","","",22,null],[11,"has_packed","","",22,null],[11,"set_packed","","",22,null],[11,"get_packed","","",22,null],[11,"clear_jstype","","",22,null],[11,"has_jstype","","",22,null],[11,"set_jstype","","",22,null],[11,"get_jstype","","",22,null],[11,"clear_lazy","","",22,null],[11,"has_lazy","","",22,null],[11,"set_lazy","","",22,null],[11,"get_lazy","","",22,null],[11,"clear_deprecated","","",22,null],[11,"has_deprecated","","",22,null],[11,"set_deprecated","","",22,null],[11,"get_deprecated","","",22,null],[11,"clear_weak","","",22,null],[11,"has_weak","","",22,null],[11,"set_weak","","",22,null],[11,"get_weak","","",22,null],[11,"clear_uninterpreted_option","","",22,null],[11,"set_uninterpreted_option","","",22,null],[11,"mut_uninterpreted_option","","",22,null],[11,"take_uninterpreted_option","","",22,null],[11,"get_uninterpreted_option","","",22,null],[11,"is_initialized","","",22,null],[11,"merge_from","","",22,null],[11,"compute_size","","",22,null],[11,"write_to_with_cached_sizes","","",22,null],[11,"get_cached_size","","",22,null],[11,"get_unknown_fields","","",22,null],[11,"mut_unknown_fields","","",22,null],[11,"type_id","","",22,null],[11,"as_any","","",22,null],[11,"descriptor","","",22,null],[11,"new","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"descriptor_static","","",22,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",22,null],[11,"eq","","",22,null],[11,"fmt","","",22,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"fmt","","",7,null],[11,"hash","","",7,null],[11,"value","","",7,null],[11,"from_i32","","",7,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",7,null],[11,"enum_descriptor_static","","",7,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"fmt","","",8,null],[11,"hash","","",8,null],[11,"value","","",8,null],[11,"from_i32","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",8,null],[11,"enum_descriptor_static","","",8,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"clone","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"default_instance","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"clear_uninterpreted_option","","",23,null],[11,"set_uninterpreted_option","","",23,null],[11,"mut_uninterpreted_option","","",23,null],[11,"take_uninterpreted_option","","",23,null],[11,"get_uninterpreted_option","","",23,null],[11,"is_initialized","","",23,null],[11,"merge_from","","",23,null],[11,"compute_size","","",23,null],[11,"write_to_with_cached_sizes","","",23,null],[11,"get_cached_size","","",23,null],[11,"get_unknown_fields","","",23,null],[11,"mut_unknown_fields","","",23,null],[11,"type_id","","",23,null],[11,"as_any","","",23,null],[11,"descriptor","","",23,null],[11,"new","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"descriptor_static","","",23,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",23,null],[11,"eq","","",23,null],[11,"fmt","","",23,null],[11,"clone","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"default_instance","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"clear_allow_alias","","",24,null],[11,"has_allow_alias","","",24,null],[11,"set_allow_alias","","",24,null],[11,"get_allow_alias","","",24,null],[11,"clear_deprecated","","",24,null],[11,"has_deprecated","","",24,null],[11,"set_deprecated","","",24,null],[11,"get_deprecated","","",24,null],[11,"clear_uninterpreted_option","","",24,null],[11,"set_uninterpreted_option","","",24,null],[11,"mut_uninterpreted_option","","",24,null],[11,"take_uninterpreted_option","","",24,null],[11,"get_uninterpreted_option","","",24,null],[11,"is_initialized","","",24,null],[11,"merge_from","","",24,null],[11,"compute_size","","",24,null],[11,"write_to_with_cached_sizes","","",24,null],[11,"get_cached_size","","",24,null],[11,"get_unknown_fields","","",24,null],[11,"mut_unknown_fields","","",24,null],[11,"type_id","","",24,null],[11,"as_any","","",24,null],[11,"descriptor","","",24,null],[11,"new","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"descriptor_static","","",24,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",24,null],[11,"eq","","",24,null],[11,"fmt","","",24,null],[11,"clone","","",25,null],[11,"default","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"default_instance","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"clear_deprecated","","",25,null],[11,"has_deprecated","","",25,null],[11,"set_deprecated","","",25,null],[11,"get_deprecated","","",25,null],[11,"clear_uninterpreted_option","","",25,null],[11,"set_uninterpreted_option","","",25,null],[11,"mut_uninterpreted_option","","",25,null],[11,"take_uninterpreted_option","","",25,null],[11,"get_uninterpreted_option","","",25,null],[11,"is_initialized","","",25,null],[11,"merge_from","","",25,null],[11,"compute_size","","",25,null],[11,"write_to_with_cached_sizes","","",25,null],[11,"get_cached_size","","",25,null],[11,"get_unknown_fields","","",25,null],[11,"mut_unknown_fields","","",25,null],[11,"type_id","","",25,null],[11,"as_any","","",25,null],[11,"descriptor","","",25,null],[11,"new","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"descriptor_static","","",25,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",25,null],[11,"eq","","",25,null],[11,"fmt","","",25,null],[11,"clone","","",26,null],[11,"default","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"default_instance","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"clear_deprecated","","",26,null],[11,"has_deprecated","","",26,null],[11,"set_deprecated","","",26,null],[11,"get_deprecated","","",26,null],[11,"clear_uninterpreted_option","","",26,null],[11,"set_uninterpreted_option","","",26,null],[11,"mut_uninterpreted_option","","",26,null],[11,"take_uninterpreted_option","","",26,null],[11,"get_uninterpreted_option","","",26,null],[11,"is_initialized","","",26,null],[11,"merge_from","","",26,null],[11,"compute_size","","",26,null],[11,"write_to_with_cached_sizes","","",26,null],[11,"get_cached_size","","",26,null],[11,"get_unknown_fields","","",26,null],[11,"mut_unknown_fields","","",26,null],[11,"type_id","","",26,null],[11,"as_any","","",26,null],[11,"descriptor","","",26,null],[11,"new","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"descriptor_static","","",26,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",26,null],[11,"eq","","",26,null],[11,"fmt","","",26,null],[11,"clone","","",27,null],[11,"default","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"default_instance","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"clear_deprecated","","",27,null],[11,"has_deprecated","","",27,null],[11,"set_deprecated","","",27,null],[11,"get_deprecated","","",27,null],[11,"clear_uninterpreted_option","","",27,null],[11,"set_uninterpreted_option","","",27,null],[11,"mut_uninterpreted_option","","",27,null],[11,"take_uninterpreted_option","","",27,null],[11,"get_uninterpreted_option","","",27,null],[11,"is_initialized","","",27,null],[11,"merge_from","","",27,null],[11,"compute_size","","",27,null],[11,"write_to_with_cached_sizes","","",27,null],[11,"get_cached_size","","",27,null],[11,"get_unknown_fields","","",27,null],[11,"mut_unknown_fields","","",27,null],[11,"type_id","","",27,null],[11,"as_any","","",27,null],[11,"descriptor","","",27,null],[11,"new","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"descriptor_static","","",27,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",27,null],[11,"eq","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",28,null],[11,"default","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"default_instance","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"clear_name","","",28,null],[11,"set_name","","",28,null],[11,"mut_name","","",28,null],[11,"take_name","","",28,null],[11,"get_name","","",28,null],[11,"clear_identifier_value","","",28,null],[11,"has_identifier_value","","",28,null],[11,"set_identifier_value","","",28,null],[11,"mut_identifier_value","","",28,null],[11,"take_identifier_value","","",28,null],[11,"get_identifier_value","","",28,null],[11,"clear_positive_int_value","","",28,null],[11,"has_positive_int_value","","",28,null],[11,"set_positive_int_value","","",28,null],[11,"get_positive_int_value","","",28,null],[11,"clear_negative_int_value","","",28,null],[11,"has_negative_int_value","","",28,null],[11,"set_negative_int_value","","",28,null],[11,"get_negative_int_value","","",28,null],[11,"clear_double_value","","",28,null],[11,"has_double_value","","",28,null],[11,"set_double_value","","",28,null],[11,"get_double_value","","",28,null],[11,"clear_string_value","","",28,null],[11,"has_string_value","","",28,null],[11,"set_string_value","","",28,null],[11,"mut_string_value","","",28,null],[11,"take_string_value","","",28,null],[11,"get_string_value","","",28,null],[11,"clear_aggregate_value","","",28,null],[11,"has_aggregate_value","","",28,null],[11,"set_aggregate_value","","",28,null],[11,"mut_aggregate_value","","",28,null],[11,"take_aggregate_value","","",28,null],[11,"get_aggregate_value","","",28,null],[11,"is_initialized","","",28,null],[11,"merge_from","","",28,null],[11,"compute_size","","",28,null],[11,"write_to_with_cached_sizes","","",28,null],[11,"get_cached_size","","",28,null],[11,"get_unknown_fields","","",28,null],[11,"mut_unknown_fields","","",28,null],[11,"type_id","","",28,null],[11,"as_any","","",28,null],[11,"descriptor","","",28,null],[11,"new","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"descriptor_static","","",28,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",28,null],[11,"eq","","",28,null],[11,"fmt","","",28,null],[11,"clone","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"default_instance","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"clear_name_part","","",29,null],[11,"has_name_part","","",29,null],[11,"set_name_part","","",29,null],[11,"mut_name_part","","",29,null],[11,"take_name_part","","",29,null],[11,"get_name_part","","",29,null],[11,"clear_is_extension","","",29,null],[11,"has_is_extension","","",29,null],[11,"set_is_extension","","",29,null],[11,"get_is_extension","","",29,null],[11,"is_initialized","","",29,null],[11,"merge_from","","",29,null],[11,"compute_size","","",29,null],[11,"write_to_with_cached_sizes","","",29,null],[11,"get_cached_size","","",29,null],[11,"get_unknown_fields","","",29,null],[11,"mut_unknown_fields","","",29,null],[11,"type_id","","",29,null],[11,"as_any","","",29,null],[11,"descriptor","","",29,null],[11,"new","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"descriptor_static","","",29,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",29,null],[11,"eq","","",29,null],[11,"fmt","","",29,null],[11,"clone","","",30,null],[11,"default","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"default_instance","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"clear_location","","",30,null],[11,"set_location","","",30,null],[11,"mut_location","","",30,null],[11,"take_location","","",30,null],[11,"get_location","","",30,null],[11,"is_initialized","","",30,null],[11,"merge_from","","",30,null],[11,"compute_size","","",30,null],[11,"write_to_with_cached_sizes","","",30,null],[11,"get_cached_size","","",30,null],[11,"get_unknown_fields","","",30,null],[11,"mut_unknown_fields","","",30,null],[11,"type_id","","",30,null],[11,"as_any","","",30,null],[11,"descriptor","","",30,null],[11,"new","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"descriptor_static","","",30,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",30,null],[11,"eq","","",30,null],[11,"fmt","","",30,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"default_instance","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"clear_path","","",31,null],[11,"set_path","","",31,null],[11,"mut_path","","",31,null],[11,"take_path","","",31,null],[11,"get_path","","",31,null],[11,"clear_span","","",31,null],[11,"set_span","","",31,null],[11,"mut_span","","",31,null],[11,"take_span","","",31,null],[11,"get_span","","",31,null],[11,"clear_leading_comments","","",31,null],[11,"has_leading_comments","","",31,null],[11,"set_leading_comments","","",31,null],[11,"mut_leading_comments","","",31,null],[11,"take_leading_comments","","",31,null],[11,"get_leading_comments","","",31,null],[11,"clear_trailing_comments","","",31,null],[11,"has_trailing_comments","","",31,null],[11,"set_trailing_comments","","",31,null],[11,"mut_trailing_comments","","",31,null],[11,"take_trailing_comments","","",31,null],[11,"get_trailing_comments","","",31,null],[11,"clear_leading_detached_comments","","",31,null],[11,"set_leading_detached_comments","","",31,null],[11,"mut_leading_detached_comments","","",31,null],[11,"take_leading_detached_comments","","",31,null],[11,"get_leading_detached_comments","","",31,null],[11,"is_initialized","","",31,null],[11,"merge_from","","",31,null],[11,"compute_size","","",31,null],[11,"write_to_with_cached_sizes","","",31,null],[11,"get_cached_size","","",31,null],[11,"get_unknown_fields","","",31,null],[11,"mut_unknown_fields","","",31,null],[11,"type_id","","",31,null],[11,"as_any","","",31,null],[11,"descriptor","","",31,null],[11,"new","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"descriptor_static","","",31,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",31,null],[11,"eq","","",31,null],[11,"fmt","","",31,null],[11,"clone","","",32,null],[11,"default","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"default_instance","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"clear_annotation","","",32,null],[11,"set_annotation","","",32,null],[11,"mut_annotation","","",32,null],[11,"take_annotation","","",32,null],[11,"get_annotation","","",32,null],[11,"is_initialized","","",32,null],[11,"merge_from","","",32,null],[11,"compute_size","","",32,null],[11,"write_to_with_cached_sizes","","",32,null],[11,"get_cached_size","","",32,null],[11,"get_unknown_fields","","",32,null],[11,"mut_unknown_fields","","",32,null],[11,"type_id","","",32,null],[11,"as_any","","",32,null],[11,"descriptor","","",32,null],[11,"new","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"descriptor_static","","",32,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",32,null],[11,"eq","","",32,null],[11,"fmt","","",32,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"default_instance","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"clear_path","","",33,null],[11,"set_path","","",33,null],[11,"mut_path","","",33,null],[11,"take_path","","",33,null],[11,"get_path","","",33,null],[11,"clear_source_file","","",33,null],[11,"has_source_file","","",33,null],[11,"set_source_file","","",33,null],[11,"mut_source_file","","",33,null],[11,"take_source_file","","",33,null],[11,"get_source_file","","",33,null],[11,"clear_begin","","",33,null],[11,"has_begin","","",33,null],[11,"set_begin","","",33,null],[11,"get_begin","","",33,null],[11,"clear_end","","",33,null],[11,"has_end","","",33,null],[11,"set_end","","",33,null],[11,"get_end","","",33,null],[11,"is_initialized","","",33,null],[11,"merge_from","","",33,null],[11,"compute_size","","",33,null],[11,"write_to_with_cached_sizes","","",33,null],[11,"get_cached_size","","",33,null],[11,"get_unknown_fields","","",33,null],[11,"mut_unknown_fields","","",33,null],[11,"type_id","","",33,null],[11,"as_any","","",33,null],[11,"descriptor","","",33,null],[11,"new","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"descriptor_static","","",33,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",33,null],[11,"eq","","",33,null],[11,"fmt","","",33,null],[0,"plugin","protobuf","",null,null],[3,"CodeGeneratorRequest","protobuf::plugin","",null,null],[3,"CodeGeneratorResponse","","",null,null],[3,"CodeGeneratorResponse_File","","",null,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"clone","","",34,null],[11,"default","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"default_instance","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"clear_file_to_generate","","",34,null],[11,"set_file_to_generate","","",34,null],[11,"mut_file_to_generate","","",34,null],[11,"take_file_to_generate","","",34,null],[11,"get_file_to_generate","","",34,null],[11,"clear_parameter","","",34,null],[11,"has_parameter","","",34,null],[11,"set_parameter","","",34,null],[11,"mut_parameter","","",34,null],[11,"take_parameter","","",34,null],[11,"get_parameter","","",34,null],[11,"clear_proto_file","","",34,null],[11,"set_proto_file","","",34,null],[11,"mut_proto_file","","",34,null],[11,"take_proto_file","","",34,null],[11,"get_proto_file","","",34,null],[11,"is_initialized","","",34,null],[11,"merge_from","","",34,null],[11,"compute_size","","",34,null],[11,"write_to_with_cached_sizes","","",34,null],[11,"get_cached_size","","",34,null],[11,"get_unknown_fields","","",34,null],[11,"mut_unknown_fields","","",34,null],[11,"type_id","","",34,null],[11,"as_any","","",34,null],[11,"descriptor","","",34,null],[11,"new","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"descriptor_static","","",34,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",34,null],[11,"eq","","",34,null],[11,"fmt","","",34,null],[11,"clone","","",35,null],[11,"default","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"default_instance","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"clear_error","","",35,null],[11,"has_error","","",35,null],[11,"set_error","","",35,null],[11,"mut_error","","",35,null],[11,"take_error","","",35,null],[11,"get_error","","",35,null],[11,"clear_file","","",35,null],[11,"set_file","","",35,null],[11,"mut_file","","",35,null],[11,"take_file","","",35,null],[11,"get_file","","",35,null],[11,"is_initialized","","",35,null],[11,"merge_from","","",35,null],[11,"compute_size","","",35,null],[11,"write_to_with_cached_sizes","","",35,null],[11,"get_cached_size","","",35,null],[11,"get_unknown_fields","","",35,null],[11,"mut_unknown_fields","","",35,null],[11,"type_id","","",35,null],[11,"as_any","","",35,null],[11,"descriptor","","",35,null],[11,"new","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"descriptor_static","","",35,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",35,null],[11,"eq","","",35,null],[11,"fmt","","",35,null],[11,"clone","","",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"default_instance","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"clear_name","","",36,null],[11,"has_name","","",36,null],[11,"set_name","","",36,null],[11,"mut_name","","",36,null],[11,"take_name","","",36,null],[11,"get_name","","",36,null],[11,"clear_insertion_point","","",36,null],[11,"has_insertion_point","","",36,null],[11,"set_insertion_point","","",36,null],[11,"mut_insertion_point","","",36,null],[11,"take_insertion_point","","",36,null],[11,"get_insertion_point","","",36,null],[11,"clear_content","","",36,null],[11,"has_content","","",36,null],[11,"set_content","","",36,null],[11,"mut_content","","",36,null],[11,"take_content","","",36,null],[11,"get_content","","",36,null],[11,"is_initialized","","",36,null],[11,"merge_from","","",36,null],[11,"compute_size","","",36,null],[11,"write_to_with_cached_sizes","","",36,null],[11,"get_cached_size","","",36,null],[11,"get_unknown_fields","","",36,null],[11,"mut_unknown_fields","","",36,null],[11,"type_id","","",36,null],[11,"as_any","","",36,null],[11,"descriptor","","",36,null],[11,"new","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"descriptor_static","","",36,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",36,null],[11,"eq","","",36,null],[11,"fmt","","",36,null],[0,"core","protobuf","",null,null],[5,"message_is","protobuf::core","",null,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[5,"message_down_cast","","",null,{"inputs":[{"name":"message"}],"output":{"name":"m"}}],[5,"parse_from","","",null,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[5,"parse_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"name":"protobufresult"}}],[5,"parse_from_bytes","","",null,null],[5,"parse_length_delimited_from","","",null,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[5,"parse_length_delimited_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"name":"protobufresult"}}],[5,"parse_length_delimited_from_bytes","","",null,null],[8,"MessageStatic","","",null,null],[10,"new","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"descriptor_static","","",37,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[8,"Message","","",null,null],[10,"descriptor","","",38,null],[10,"is_initialized","","",38,null],[10,"merge_from","","",38,null],[10,"write_to_with_cached_sizes","","",38,null],[10,"compute_size","","",38,null],[10,"get_cached_size","","",38,null],[11,"write_to","","",38,null],[11,"write_length_delimited_to","","",38,null],[11,"merge_from_bytes","","",38,null],[11,"check_initialized","","",38,null],[11,"write_to_writer","","",38,null],[11,"write_to_vec","","",38,null],[11,"write_to_bytes","","",38,null],[11,"write_length_delimited_to_writer","","",38,null],[11,"write_length_delimited_to_bytes","","",38,null],[10,"get_unknown_fields","","",38,null],[10,"mut_unknown_fields","","",38,null],[10,"type_id","","",38,null],[10,"as_any","","",38,null],[8,"ProtobufEnum","","",null,null],[10,"value","","",39,null],[10,"from_i32","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",39,null],[11,"descriptor","","",39,null],[11,"enum_descriptor","","",39,null],[11,"enum_descriptor_static","","",39,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[0,"rt","protobuf","",null,null],[5,"compute_raw_varint64_size","protobuf::rt","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[5,"compute_raw_varint32_size","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"vec_packed_varint_data_size","","",null,null],[5,"vec_packed_varint_zigzag_data_size","","",null,null],[5,"vec_packed_enum_data_size","","",null,null],[5,"vec_packed_varint_size","","",null,null],[5,"vec_packed_varint_zigzag_size","","",null,null],[5,"vec_packed_enum_size","","",null,null],[5,"tag_size","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"value_size_no_tag","","",null,{"inputs":[{"name":"t"},{"name":"wiretype"}],"output":{"name":"u32"}}],[5,"value_size","","",null,{"inputs":[{"name":"u32"},{"name":"t"},{"name":"wiretype"}],"output":{"name":"u32"}}],[5,"value_varint_zigzag_size_no_tag","","Length of value when encoded with zigzag encoding",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"value_varint_zigzag_size","","Length of value when encoding with zigzag encoding with tag",null,{"inputs":[{"name":"u32"},{"name":"t"}],"output":{"name":"u32"}}],[5,"enum_size","","",null,{"inputs":[{"name":"u32"},{"name":"e"}],"output":{"name":"u32"}}],[5,"bytes_size","","",null,null],[5,"string_size","","",null,{"inputs":[{"name":"u32"},{"name":"str"}],"output":{"name":"u32"}}],[5,"unknown_fields_size","","",null,{"inputs":[{"name":"unknownfields"}],"output":{"name":"u32"}}],[5,"read_repeated_int32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_int64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_uint32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_uint64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sint32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sint64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_fixed32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_fixed64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sfixed32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sfixed64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_double_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_float_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_bool_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_enum_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularfield"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularfield"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_message_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_message_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularptrfield"}],"output":{"name":"protobufresult"}}],[5,"read_unknown_or_skip_group","","",null,{"inputs":[{"name":"u32"},{"name":"wiretype"},{"name":"codedinputstream"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[5,"unexpected_wire_type","","Create an error for unexpected wire type.",null,{"inputs":[{"name":"wiretype"}],"output":{"name":"protobuferror"}}],[8,"ProtobufVarint","","",null,null],[10,"len_varint","","",40,null],[8,"ProtobufVarintZigzag","","",null,null],[10,"len_varint_zigzag","","",41,null],[0,"lazy","protobuf","",null,null],[3,"Lazy","protobuf::lazy","",null,null],[12,"lock","","",42,null],[12,"ptr","","",42,null],[17,"ONCE_INIT","","",null,null],[11,"get","","",42,null],[0,"code_writer","protobuf","",null,null],[3,"CodeWriter","protobuf::code_writer","",null,null],[11,"new","","",43,{"inputs":[{"name":"write"}],"output":{"name":"codewriter"}}],[11,"write_line","","",43,null],[11,"write_generated","","",43,null],[11,"todo","","",43,null],[11,"indented","","",43,null],[11,"commented","","",43,null],[11,"lazy_static","","",43,null],[11,"lazy_static_decl_get","","",43,null],[11,"block","","",43,null],[11,"expr_block","","",43,null],[11,"stmt_block","","",43,null],[11,"unsafe_expr","","",43,null],[11,"impl_self_block","","",43,null],[11,"impl_for_block","","",43,null],[11,"unsafe_impl","","",43,null],[11,"pub_struct","","",43,null],[11,"def_struct","","",43,null],[11,"pub_enum","","",43,null],[11,"pub_trait","","",43,null],[11,"field_entry","","",43,null],[11,"field_decl","","",43,null],[11,"derive","","",43,null],[11,"allow","","",43,null],[11,"comment","","",43,null],[11,"fn_def","","",43,null],[11,"pub_fn","","",43,null],[11,"def_fn","","",43,null],[11,"while_block","","",43,null],[11,"if_stmt","","",43,null],[11,"if_else_stmt","","",43,null],[11,"if_let_stmt","","",43,null],[11,"if_let_else_stmt","","",43,null],[11,"for_stmt","","",43,null],[11,"match_block","","",43,null],[11,"match_expr","","",43,null],[11,"case_block","","",43,null],[11,"case_expr","","",43,null],[11,"error_unexpected_wire_type","","",43,null],[11,"assert_wire_type","","",43,null],[0,"codegen","protobuf","",null,null],[4,"RustType","protobuf::codegen","",null,null],[13,"Int","","",44,null],[13,"Float","","",44,null],[13,"Bool","","",44,null],[13,"Vec","","",44,null],[13,"String","","",44,null],[13,"Slice","","",44,null],[13,"Str","","",44,null],[13,"Option","","",44,null],[13,"SingularField","","",44,null],[13,"SingularPtrField","","",44,null],[13,"RepeatedField","","",44,null],[13,"Uniq","","",44,null],[13,"Ref","","",44,null],[13,"Message","","",44,null],[13,"Enum","","",44,null],[13,"Oneof","","",44,null],[13,"Group","","",44,null],[5,"gen","","",null,null],[5,"protoc_gen_rust_main","","",null,{"inputs":[],"output":null}],[11,"clone","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"fmt","","",44,null],[0,"compiler_plugin","protobuf","",null,null],[3,"GenResult","protobuf::compiler_plugin","",null,null],[12,"name","","",45,null],[12,"content","","",45,null],[5,"plugin_main","","",null,null],[0,"repeated","protobuf","",null,null],[3,"RepeatedField","protobuf::repeated","",null,null],[11,"clear","","",46,null],[11,"clear","","",46,null],[11,"default","","",46,{"inputs":[],"output":{"name":"repeatedfield"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"repeatedfield"}}],[11,"from_vec","","",46,{"inputs":[{"name":"vec"}],"output":{"name":"repeatedfield"}}],[11,"into_vec","","",46,null],[11,"capacity","","",46,null],[11,"as_mut_slice","","",46,null],[11,"slice","","",46,null],[11,"slice_mut","","",46,null],[11,"slice_from","","",46,null],[11,"slice_from_mut","","",46,null],[11,"slice_to","","",46,null],[11,"slice_to_mut","","",46,null],[11,"split_at","","",46,null],[11,"split_at_mut","","",46,null],[11,"tail","","",46,null],[11,"last","","",46,null],[11,"last_mut","","",46,null],[11,"init","","",46,null],[11,"push","","",46,null],[11,"pop","","",46,null],[11,"insert","","",46,null],[11,"remove","","",46,null],[11,"truncate","","",46,null],[11,"reverse","","",46,null],[11,"into_iter","","",46,null],[11,"iter","","",46,null],[11,"iter_mut","","",46,null],[11,"sort_by","","",46,null],[11,"as_ptr","","",46,null],[11,"as_mut_ptr","","",46,null],[11,"push_default","","",46,null],[11,"from_slice","","",46,null],[11,"clone","","",46,null],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"repeatedfield"}}],[11,"eq","","",46,null],[11,"contains","","",46,null],[11,"hash","","",46,null],[11,"as_ref","","",46,null],[11,"borrow","","",46,null],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"fmt","","",46,null],[0,"singular","protobuf","",null,null],[3,"SingularField","protobuf::singular","",null,null],[3,"SingularPtrField","","",null,null],[11,"some","","",47,{"inputs":[{"name":"t"}],"output":{"name":"singularfield"}}],[11,"is_some","","",47,null],[11,"is_none","","",47,null],[11,"into_option","","",47,null],[11,"as_ref","","",47,null],[11,"as_mut","","",47,null],[11,"get_ref","","",47,null],[11,"get_mut_ref","","",47,null],[11,"unwrap","","",47,null],[11,"unwrap_or","","",47,null],[11,"unwrap_or_else","","",47,null],[11,"map","","",47,null],[11,"iter","","",47,null],[11,"mut_iter","","",47,null],[11,"clear","","",47,null],[11,"none","","",47,{"inputs":[],"output":{"name":"singularfield"}}],[11,"from_option","","",47,{"inputs":[{"name":"option"}],"output":{"name":"singularfield"}}],[11,"take","","",47,null],[11,"some","","",48,{"inputs":[{"name":"t"}],"output":{"name":"singularptrfield"}}],[11,"none","","",48,{"inputs":[],"output":{"name":"singularptrfield"}}],[11,"from_option","","",48,{"inputs":[{"name":"option"}],"output":{"name":"singularptrfield"}}],[11,"is_some","","",48,null],[11,"is_none","","",48,null],[11,"into_option","","",48,null],[11,"as_ref","","",48,null],[11,"as_mut","","",48,null],[11,"get_ref","","",48,null],[11,"get_mut_ref","","",48,null],[11,"unwrap","","",48,null],[11,"unwrap_or","","",48,null],[11,"unwrap_or_else","","",48,null],[11,"map","","",48,null],[11,"iter","","",48,null],[11,"mut_iter","","",48,null],[11,"take","","",48,null],[11,"clear","","",48,null],[11,"unwrap_or_default","","",47,null],[11,"set_default","","",47,null],[11,"unwrap_or_default","","",48,null],[11,"set_default","","",48,null],[11,"default","","",47,{"inputs":[],"output":{"name":"singularfield"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"singularptrfield"}}],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"fmt","","",47,null],[11,"fmt","","",48,null],[11,"eq","","",47,null],[11,"eq","","",48,null],[11,"hash","","",47,null],[11,"hash","","",48,null],[0,"clear","protobuf","",null,null],[8,"Clear","protobuf::clear","anything that can be cleared",null,null],[10,"clear","","",49,null],[0,"reflect","protobuf","",null,null],[3,"FieldDescriptor","protobuf::reflect","",null,null],[3,"MessageDescriptor","","",null,null],[3,"EnumValueDescriptor","","",null,null],[3,"EnumDescriptor","","",null,null],[0,"accessor","","",null,null],[5,"make_singular_u32_accessor","protobuf::reflect::accessor","",null,null],[5,"make_singular_i32_accessor","","",null,null],[5,"make_singular_u64_accessor","","",null,null],[5,"make_singular_i64_accessor","","",null,null],[5,"make_singular_f32_accessor","","",null,null],[5,"make_singular_f64_accessor","","",null,null],[5,"make_singular_bool_accessor","","",null,null],[5,"make_singular_string_accessor","","",null,null],[5,"make_singular_bytes_accessor","","",null,null],[5,"make_singular_enum_accessor","","",null,null],[5,"make_singular_message_accessor","","",null,null],[5,"make_repeated_u32_accessor","","",null,null],[5,"make_repeated_i32_accessor","","",null,null],[5,"make_repeated_u64_accessor","","",null,null],[5,"make_repeated_i64_accessor","","",null,null],[5,"make_repeated_f32_accessor","","",null,null],[5,"make_repeated_f64_accessor","","",null,null],[5,"make_repeated_bool_accessor","","",null,null],[5,"make_repeated_string_accessor","","",null,null],[5,"make_repeated_bytes_accessor","","",null,null],[5,"make_repeated_enum_accessor","","",null,null],[5,"make_repeated_message_accessor","","",null,null],[8,"FieldAccessor","","this trait should not be used directly, use `FieldDescriptor` instead",null,null],[10,"name_generic","","",50,null],[10,"has_field_generic","","",50,null],[10,"len_field_generic","","",50,null],[10,"get_message_generic","","",50,null],[10,"get_rep_message_item_generic","","",50,null],[10,"get_enum_generic","","",50,null],[10,"get_rep_enum_item_generic","","",50,null],[10,"get_str_generic","","",50,null],[10,"get_rep_str_generic","","",50,null],[10,"get_bytes_generic","","",50,null],[10,"get_rep_bytes_generic","","",50,null],[10,"get_u32_generic","","",50,null],[10,"get_rep_u32_generic","","",50,null],[10,"get_u64_generic","","",50,null],[10,"get_rep_u64_generic","","",50,null],[10,"get_i32_generic","","",50,null],[10,"get_rep_i32_generic","","",50,null],[10,"get_i64_generic","","",50,null],[10,"get_rep_i64_generic","","",50,null],[10,"get_bool_generic","","",50,null],[10,"get_rep_bool_generic","","",50,null],[10,"get_f32_generic","","",50,null],[10,"get_rep_f32_generic","","",50,null],[10,"get_f64_generic","","",50,null],[10,"get_rep_f64_generic","","",50,null],[11,"proto","protobuf::reflect","",51,null],[11,"name","","",51,null],[11,"is_repeated","","",51,null],[11,"has_field","","",51,null],[11,"len_field","","",51,null],[11,"get_message","","",51,null],[11,"get_rep_message_item","","",51,null],[11,"get_enum","","",51,null],[11,"get_rep_enum_item","","",51,null],[11,"get_str","","",51,null],[11,"get_rep_str","","",51,null],[11,"get_rep_str_item","","",51,null],[11,"get_bytes","","",51,null],[11,"get_rep_bytes","","",51,null],[11,"get_rep_bytes_item","","",51,null],[11,"get_u32","","",51,null],[11,"get_rep_u32","","",51,null],[11,"get_u64","","",51,null],[11,"get_rep_u64","","",51,null],[11,"get_i32","","",51,null],[11,"get_rep_i32","","",51,null],[11,"get_i64","","",51,null],[11,"get_rep_i64","","",51,null],[11,"get_bool","","",51,null],[11,"get_rep_bool","","",51,null],[11,"get_f32","","",51,null],[11,"get_rep_f32","","",51,null],[11,"get_f64","","",51,null],[11,"get_rep_f64","","",51,null],[11,"for_type","","",52,{"inputs":[],"output":{"name":"messagedescriptor"}}],[11,"new","","",52,{"inputs":[{"name":"str"},{"name":"vec"},{"name":"filedescriptorproto"}],"output":{"name":"messagedescriptor"}}],[11,"new_instance","","",52,null],[11,"name","","",52,null],[11,"full_name","","",52,null],[11,"fields","","",52,null],[11,"field_by_name","","",52,null],[11,"field_by_number","","",52,null],[11,"clone","","",53,null],[11,"name","","",53,null],[11,"value","","",53,null],[11,"name","","",54,null],[11,"for_type","","",54,{"inputs":[],"output":{"name":"enumdescriptor"}}],[11,"new","","",54,{"inputs":[{"name":"str"},{"name":"filedescriptorproto"}],"output":{"name":"enumdescriptor"}}],[11,"value_by_name","","",54,null],[11,"value_by_number","","",54,null],[0,"text_format","protobuf","",null,null],[5,"print_to","protobuf::text_format","",null,{"inputs":[{"name":"message"},{"name":"string"}],"output":null}],[5,"print_to_string","","",null,{"inputs":[{"name":"message"}],"output":{"name":"string"}}],[5,"fmt","","",null,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","protobuf","",null,null],[3,"CodedInputStream","protobuf::stream","",null,null],[3,"CodedOutputStream","","",null,null],[5,"with_coded_output_stream_to_bytes","","",null,{"inputs":[{"name":"f"}],"output":{"name":"protobufresult"}}],[0,"wire_format","","",null,null],[3,"Tag","protobuf::stream::wire_format","",null,null],[4,"WireType","","",null,null],[13,"WireTypeVarint","","",55,null],[13,"WireTypeFixed64","","",55,null],[13,"WireTypeLengthDelimited","","",55,null],[13,"WireTypeStartGroup","","",55,null],[13,"WireTypeEndGroup","","",55,null],[13,"WireTypeFixed32","","",55,null],[17,"TAG_TYPE_BITS","","",null,null],[17,"TAG_TYPE_MASK","","",null,null],[17,"FIELD_NUMBER_MAX","","",null,null],[11,"eq","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"new","","",55,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",56,null],[11,"value","","",56,null],[11,"new","","",56,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"make","","",56,{"inputs":[{"name":"u32"},{"name":"wiretype"}],"output":{"name":"tag"}}],[11,"unpack","","",56,null],[11,"field_number","","",56,null],[8,"WithCodedOutputStream","protobuf::stream","",null,null],[10,"with_coded_output_stream","","",57,null],[8,"WithCodedInputStream","","",null,null],[10,"with_coded_input_stream","","",58,null],[11,"new","","",59,{"inputs":[{"name":"read"}],"output":{"name":"codedinputstream"}}],[11,"from_buffered_reader","","",59,{"inputs":[{"name":"bufread"}],"output":{"name":"codedinputstream"}}],[11,"from_bytes","","",59,null],[11,"pos","","",59,null],[11,"bytes_until_limit","","",59,null],[11,"read","","",59,null],[11,"read_raw_byte","","",59,null],[11,"push_limit","","",59,null],[11,"pop_limit","","",59,null],[11,"eof","","",59,null],[11,"check_eof","","",59,null],[11,"read_raw_varint64","","",59,null],[11,"read_raw_varint32","","",59,null],[11,"read_raw_little_endian32","","",59,null],[11,"read_raw_little_endian64","","",59,null],[11,"read_tag","","",59,null],[11,"read_tag_unpack","","",59,null],[11,"read_double","","",59,null],[11,"read_float","","",59,null],[11,"read_int64","","",59,null],[11,"read_int32","","",59,null],[11,"read_uint64","","",59,null],[11,"read_uint32","","",59,null],[11,"read_sint64","","",59,null],[11,"read_sint32","","",59,null],[11,"read_fixed64","","",59,null],[11,"read_fixed32","","",59,null],[11,"read_sfixed64","","",59,null],[11,"read_sfixed32","","",59,null],[11,"read_bool","","",59,null],[11,"read_enum","","",59,null],[11,"read_repeated_packed_double_into","","",59,null],[11,"read_repeated_packed_float_into","","",59,null],[11,"read_repeated_packed_int64_into","","",59,null],[11,"read_repeated_packed_int32_into","","",59,null],[11,"read_repeated_packed_uint64_into","","",59,null],[11,"read_repeated_packed_uint32_into","","",59,null],[11,"read_repeated_packed_sint64_into","","",59,null],[11,"read_repeated_packed_sint32_into","","",59,null],[11,"read_repeated_packed_fixed64_into","","",59,null],[11,"read_repeated_packed_fixed32_into","","",59,null],[11,"read_repeated_packed_sfixed64_into","","",59,null],[11,"read_repeated_packed_sfixed32_into","","",59,null],[11,"read_repeated_packed_bool_into","","",59,null],[11,"read_repeated_packed_enum_into","","",59,null],[11,"read_unknown","","",59,null],[11,"skip_field","","",59,null],[11,"read_raw_bytes_into","","Read raw bytes into the supplied vector.  The vector will be resized as needed and\noverwritten.",59,null],[11,"read_raw_bytes","","Read exact number of bytes",59,null],[11,"skip_raw_bytes","","",59,null],[11,"read_bytes","","",59,null],[11,"read_bytes_into","","",59,null],[11,"read_string","","",59,null],[11,"read_string_into","","",59,null],[11,"merge_message","","",59,null],[11,"read_message","","",59,null],[11,"new","","",60,{"inputs":[{"name":"write"}],"output":{"name":"codedoutputstream"}}],[11,"flush","","",60,null],[11,"write_raw_byte","","",60,null],[11,"write_raw_bytes","","",60,null],[11,"write_tag","","",60,null],[11,"write_raw_varint32","","",60,null],[11,"write_raw_varint64","","",60,null],[11,"write_raw_little_endian32","","",60,null],[11,"write_raw_little_endian64","","",60,null],[11,"write_float_no_tag","","",60,null],[11,"write_double_no_tag","","",60,null],[11,"write_float","","",60,null],[11,"write_double","","",60,null],[11,"write_uint64_no_tag","","",60,null],[11,"write_uint32_no_tag","","",60,null],[11,"write_int64_no_tag","","",60,null],[11,"write_int32_no_tag","","",60,null],[11,"write_sint64_no_tag","","",60,null],[11,"write_sint32_no_tag","","",60,null],[11,"write_fixed64_no_tag","","",60,null],[11,"write_fixed32_no_tag","","",60,null],[11,"write_sfixed64_no_tag","","",60,null],[11,"write_sfixed32_no_tag","","",60,null],[11,"write_bool_no_tag","","",60,null],[11,"write_enum_no_tag","","",60,null],[11,"write_enum_obj_no_tag","","",60,null],[11,"write_unknown_no_tag","","",60,null],[11,"write_uint64","","",60,null],[11,"write_uint32","","",60,null],[11,"write_int64","","",60,null],[11,"write_int32","","",60,null],[11,"write_sint64","","",60,null],[11,"write_sint32","","",60,null],[11,"write_fixed64","","",60,null],[11,"write_fixed32","","",60,null],[11,"write_sfixed64","","",60,null],[11,"write_sfixed32","","",60,null],[11,"write_bool","","",60,null],[11,"write_enum","","",60,null],[11,"write_enum_obj","","",60,null],[11,"write_unknown","","",60,null],[11,"write_unknown_fields","","",60,null],[11,"write_bytes_no_tag","","",60,null],[11,"write_string_no_tag","","",60,null],[11,"write_message_no_tag","","",60,null],[11,"write_bytes","","",60,null],[11,"write_string","","",60,null],[11,"write_message","","",60,null],[0,"error","protobuf","",null,null],[4,"ProtobufError","protobuf::error","",null,null],[13,"IoError","","",61,null],[13,"WireError","","",61,null],[13,"MessageNotInitialized","","",61,null],[12,"message","protobuf::error::ProtobufError","",61,null],[6,"ProtobufResult","protobuf::error","",null,null],[11,"fmt","","",61,null],[11,"message_not_initialized","","",61,{"inputs":[{"name":"str"}],"output":{"name":"protobuferror"}}],[11,"fmt","","",61,null],[11,"description","","",61,null],[11,"cause","","",61,null],[0,"hex","protobuf","",null,null],[5,"decode_hex","protobuf::hex","",null,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[5,"encode_hex","","",null,null],[0,"descriptorx","protobuf","",null,null],[3,"RootScope","protobuf::descriptorx","",null,null],[12,"file_descriptors","","",62,null],[3,"FileScope","","",null,null],[12,"file_descriptor","","",63,null],[3,"Scope","","",null,null],[12,"file_scope","","",64,null],[12,"path","","",64,null],[3,"MessageWithScope","","",null,null],[12,"scope","","",65,null],[12,"message","","",65,null],[3,"EnumWithScope","","",null,null],[12,"scope","","",66,null],[12,"en","","",66,null],[3,"FieldWithContext","","",null,null],[12,"field","","",67,null],[12,"message","","",67,null],[3,"OneofVariantWithContext","","",null,null],[12,"oneof","","",68,null],[12,"field","","",68,null],[3,"OneofWithContext","","",null,null],[12,"oneof","","",69,null],[12,"index","","",69,null],[12,"message","","",69,null],[4,"MessageOrEnumWithScope","","",null,null],[13,"Message","","",70,null],[13,"Enum","","",70,null],[5,"proto_path_to_rust_mod","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"find_message_by_rust_name","","",null,{"inputs":[{"name":"filedescriptorproto"},{"name":"str"}],"output":{"name":"messagewithscope"}}],[5,"find_enum_by_rust_name","","",null,{"inputs":[{"name":"filedescriptorproto"},{"name":"str"}],"output":{"name":"enumwithscope"}}],[8,"WithScope","","",null,null],[10,"get_scope","","",71,null],[11,"get_file_descriptor","","",71,null],[10,"get_name","","",71,null],[11,"name_to_package","","",71,null],[11,"rust_name","","",71,null],[11,"rust_fq_name","","",71,null],[11,"find_enum","","",62,null],[11,"find_message","","",62,null],[11,"find_message_or_enum","","",62,null],[11,"clone","","",63,null],[11,"to_scope","","",63,null],[11,"find_enums","","",63,null],[11,"find_messages","","",63,null],[11,"find_messages_and_enums","","",63,null],[11,"clone","","",64,null],[11,"get_file_descriptor","","",64,null],[11,"get_messages","","",64,null],[11,"get_enums","","",64,null],[11,"get_messages_and_enums","","",64,null],[11,"prefix","","",64,null],[11,"rust_prefix","","",64,null],[11,"clone","","",65,null],[11,"get_scope","","",65,null],[11,"get_name","","",65,null],[11,"into_scope","","",65,null],[11,"to_scope","","",65,null],[11,"fields","","",65,null],[11,"oneofs","","",65,null],[11,"oneof_by_index","","",65,null],[11,"clone","","",66,null],[11,"values","","",66,null],[11,"value_by_name","","",66,null],[11,"get_scope","","",66,null],[11,"get_name","","",66,null],[11,"get_scope","","",70,null],[11,"get_name","","",70,null],[11,"oneof","","",67,null],[11,"rust_name","","",67,null],[11,"clone","","",68,null],[11,"field_name","","",68,null],[11,"clone","","",69,null],[11,"name","","",69,null],[11,"rust_name","","",69,null],[11,"variants","","",69,null],[11,"fmt","protobuf","",2,null],[11,"wire_type","","",2,null],[11,"get_ref","","",2,null],[11,"wire_type","","",3,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"unknownvalues"}}],[11,"add_value","","",1,null],[11,"iter","","",1,null],[11,"next","","",72,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"unknownfields"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"unknownfields"}}],[11,"add_fixed32","","",0,null],[11,"add_fixed64","","",0,null],[11,"add_varint","","",0,null],[11,"add_length_delimited","","",0,null],[11,"add_value","","",0,null],[11,"iter","","",0,null],[11,"clear","","",0,null],[11,"next","","",73,null]],"paths":[[3,"UnknownFields"],[3,"UnknownValues"],[4,"UnknownValue"],[4,"UnknownValueRef"],[4,"FieldDescriptorProto_Type"],[4,"FieldDescriptorProto_Label"],[4,"FileOptions_OptimizeMode"],[4,"FieldOptions_CType"],[4,"FieldOptions_JSType"],[3,"FileDescriptorSet"],[3,"FileDescriptorProto"],[3,"DescriptorProto"],[3,"DescriptorProto_ExtensionRange"],[3,"DescriptorProto_ReservedRange"],[3,"FieldDescriptorProto"],[3,"OneofDescriptorProto"],[3,"EnumDescriptorProto"],[3,"EnumValueDescriptorProto"],[3,"ServiceDescriptorProto"],[3,"MethodDescriptorProto"],[3,"FileOptions"],[3,"MessageOptions"],[3,"FieldOptions"],[3,"OneofOptions"],[3,"EnumOptions"],[3,"EnumValueOptions"],[3,"ServiceOptions"],[3,"MethodOptions"],[3,"UninterpretedOption"],[3,"UninterpretedOption_NamePart"],[3,"SourceCodeInfo"],[3,"SourceCodeInfo_Location"],[3,"GeneratedCodeInfo"],[3,"GeneratedCodeInfo_Annotation"],[3,"CodeGeneratorRequest"],[3,"CodeGeneratorResponse"],[3,"CodeGeneratorResponse_File"],[8,"MessageStatic"],[8,"Message"],[8,"ProtobufEnum"],[8,"ProtobufVarint"],[8,"ProtobufVarintZigzag"],[3,"Lazy"],[3,"CodeWriter"],[4,"RustType"],[3,"GenResult"],[3,"RepeatedField"],[3,"SingularField"],[3,"SingularPtrField"],[8,"Clear"],[8,"FieldAccessor"],[3,"FieldDescriptor"],[3,"MessageDescriptor"],[3,"EnumValueDescriptor"],[3,"EnumDescriptor"],[4,"WireType"],[3,"Tag"],[8,"WithCodedOutputStream"],[8,"WithCodedInputStream"],[3,"CodedInputStream"],[3,"CodedOutputStream"],[4,"ProtobufError"],[3,"RootScope"],[3,"FileScope"],[3,"Scope"],[3,"MessageWithScope"],[3,"EnumWithScope"],[3,"FieldWithContext"],[3,"OneofVariantWithContext"],[3,"OneofWithContext"],[4,"MessageOrEnumWithScope"],[8,"WithScope"],[3,"UnknownValuesIter"],[3,"UnknownFieldsIter"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",15,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",16,null],[12,"sin6_family","","",16,null],[12,"sin6_port","","",16,null],[12,"sin6_flowinfo","","",16,null],[12,"sin6_addr","","",16,null],[12,"sin6_scope_id","","",16,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",17,null],[12,"sun_family","","",17,null],[12,"sun_path","","",17,null],[3,"passwd","","",null,null],[12,"pw_name","","",18,null],[12,"pw_passwd","","",18,null],[12,"pw_uid","","",18,null],[12,"pw_gid","","",18,null],[12,"pw_change","","",18,null],[12,"pw_class","","",18,null],[12,"pw_gecos","","",18,null],[12,"pw_dir","","",18,null],[12,"pw_shell","","",18,null],[12,"pw_expire","","",18,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",19,null],[12,"ifa_name","","",19,null],[12,"ifa_flags","","",19,null],[12,"ifa_addr","","",19,null],[12,"ifa_netmask","","",19,null],[12,"ifa_dstaddr","","",19,null],[12,"ifa_data","","",19,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",20,null],[12,"tm_min","","",20,null],[12,"tm_hour","","",20,null],[12,"tm_mday","","",20,null],[12,"tm_mon","","",20,null],[12,"tm_year","","",20,null],[12,"tm_wday","","",20,null],[12,"tm_yday","","",20,null],[12,"tm_isdst","","",20,null],[12,"tm_gmtoff","","",20,null],[12,"tm_zone","","",20,null],[3,"utsname","","",null,null],[12,"sysname","","",21,null],[12,"nodename","","",21,null],[12,"release","","",21,null],[12,"version","","",21,null],[12,"machine","","",21,null],[3,"msghdr","","",null,null],[12,"msg_name","","",22,null],[12,"msg_namelen","","",22,null],[12,"msg_iov","","",22,null],[12,"msg_iovlen","","",22,null],[12,"msg_control","","",22,null],[12,"msg_controllen","","",22,null],[12,"msg_flags","","",22,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",23,null],[12,"if_name","","",23,null],[3,"utmpx","","",null,null],[12,"ut_user","","",24,null],[12,"ut_id","","",24,null],[12,"ut_line","","",24,null],[12,"ut_pid","","",24,null],[12,"ut_type","","",24,null],[12,"ut_tv","","",24,null],[12,"ut_host","","",24,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",25,null],[12,"gl_offs","","",25,null],[12,"gl_pathv","","",25,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",26,null],[12,"ss_family","","",26,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",27,null],[12,"ai_family","","",27,null],[12,"ai_socktype","","",27,null],[12,"ai_protocol","","",27,null],[12,"ai_addrlen","","",27,null],[12,"ai_canonname","","",27,null],[12,"ai_addr","","",27,null],[12,"ai_next","","",27,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",28,null],[12,"denom","","",28,null],[3,"stat","","",null,null],[12,"st_dev","","",29,null],[12,"st_mode","","",29,null],[12,"st_nlink","","",29,null],[12,"st_ino","","",29,null],[12,"st_uid","","",29,null],[12,"st_gid","","",29,null],[12,"st_rdev","","",29,null],[12,"st_atime","","",29,null],[12,"st_atime_nsec","","",29,null],[12,"st_mtime","","",29,null],[12,"st_mtime_nsec","","",29,null],[12,"st_ctime","","",29,null],[12,"st_ctime_nsec","","",29,null],[12,"st_birthtime","","",29,null],[12,"st_birthtime_nsec","","",29,null],[12,"st_size","","",29,null],[12,"st_blocks","","",29,null],[12,"st_blksize","","",29,null],[12,"st_flags","","",29,null],[12,"st_gen","","",29,null],[12,"st_lspare","","",29,null],[12,"st_qspare","","",29,null],[3,"dirent","","",null,null],[12,"d_ino","","",30,null],[12,"d_seekoff","","",30,null],[12,"d_reclen","","",30,null],[12,"d_namlen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",31,null],[12,"si_errno","","",31,null],[12,"si_code","","",31,null],[12,"si_pid","","",31,null],[12,"si_uid","","",31,null],[12,"si_status","","",31,null],[12,"si_addr","","",31,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",32,null],[12,"sa_mask","","",32,null],[12,"sa_flags","","",32,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",33,null],[12,"ss_size","","",33,null],[12,"ss_flags","","",33,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",34,null],[12,"fst_posmode","","",34,null],[12,"fst_offset","","",34,null],[12,"fst_length","","",34,null],[12,"fst_bytesalloc","","",34,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",35,null],[12,"ra_count","","",35,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",36,null],[12,"f_frsize","","",36,null],[12,"f_blocks","","",36,null],[12,"f_bfree","","",36,null],[12,"f_bavail","","",36,null],[12,"f_files","","",36,null],[12,"f_ffree","","",36,null],[12,"f_favail","","",36,null],[12,"f_fsid","","",36,null],[12,"f_flag","","",36,null],[12,"f_namemax","","",36,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",37,null],[12,"dli_fbase","","",37,null],[12,"dli_sname","","",37,null],[12,"dli_saddr","","",37,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",38,null],[12,"sin_family","","",38,null],[12,"sin_port","","",38,null],[12,"sin_addr","","",38,null],[12,"sin_zero","","",38,null],[3,"statfs","","",null,null],[12,"f_bsize","","",39,null],[12,"f_iosize","","",39,null],[12,"f_blocks","","",39,null],[12,"f_bfree","","",39,null],[12,"f_bavail","","",39,null],[12,"f_files","","",39,null],[12,"f_ffree","","",39,null],[12,"f_fsid","","",39,null],[12,"f_owner","","",39,null],[12,"f_type","","",39,null],[12,"f_flags","","",39,null],[12,"f_fssubtype","","",39,null],[12,"f_fstypename","","",39,null],[12,"f_mntonname","","",39,null],[12,"f_mntfromname","","",39,null],[12,"f_reserved","","",39,null],[3,"kevent","","",null,null],[12,"ident","","",40,null],[12,"filter","","",40,null],[12,"flags","","",40,null],[12,"fflags","","",40,null],[12,"data","","",40,null],[12,"udata","","",40,null],[3,"kevent64_s","","",null,null],[12,"ident","","",41,null],[12,"filter","","",41,null],[12,"flags","","",41,null],[12,"fflags","","",41,null],[12,"data","","",41,null],[12,"udata","","",41,null],[12,"ext","","",41,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",42,null],[12,"dqb_bsoftlimit","","",42,null],[12,"dqb_curbytes","","",42,null],[12,"dqb_ihardlimit","","",42,null],[12,"dqb_isoftlimit","","",42,null],[12,"dqb_curinodes","","",42,null],[12,"dqb_btime","","",42,null],[12,"dqb_itime","","",42,null],[12,"dqb_id","","",42,null],[12,"dqb_spare","","",42,null],[3,"termios","","",null,null],[12,"c_iflag","","",43,null],[12,"c_oflag","","",43,null],[12,"c_cflag","","",43,null],[12,"c_lflag","","",43,null],[12,"c_cc","","",43,null],[12,"c_ispeed","","",43,null],[12,"c_ospeed","","",43,null],[3,"flock","","",null,null],[12,"l_start","","",44,null],[12,"l_len","","",44,null],[12,"l_pid","","",44,null],[12,"l_type","","",44,null],[12,"l_whence","","",44,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",45,null],[12,"hdr_cnt","","",45,null],[12,"trailers","","",45,null],[12,"trl_cnt","","",45,null],[3,"lconv","","",null,null],[12,"decimal_point","","",46,null],[12,"thousands_sep","","",46,null],[12,"grouping","","",46,null],[12,"int_curr_symbol","","",46,null],[12,"currency_symbol","","",46,null],[12,"mon_decimal_point","","",46,null],[12,"mon_thousands_sep","","",46,null],[12,"mon_grouping","","",46,null],[12,"positive_sign","","",46,null],[12,"negative_sign","","",46,null],[12,"int_frac_digits","","",46,null],[12,"frac_digits","","",46,null],[12,"p_cs_precedes","","",46,null],[12,"p_sep_by_space","","",46,null],[12,"n_cs_precedes","","",46,null],[12,"n_sep_by_space","","",46,null],[12,"p_sign_posn","","",46,null],[12,"n_sign_posn","","",46,null],[12,"int_p_cs_precedes","","",46,null],[12,"int_n_cs_precedes","","",46,null],[12,"int_p_sep_by_space","","",46,null],[12,"int_n_sep_by_space","","",46,null],[12,"int_p_sign_posn","","",46,null],[12,"int_n_sign_posn","","",46,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[11,"clone","","",47,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",53,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",54,null],[11,"clone","","",23,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"NCCS","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"if_nameindex"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["void"] = {"doc":"# Void","items":[[4,"Void","void","The empty type for cases which can&#39;t occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result&lt;T, Void&gt;`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,null],[8,"ResultVoidErrExt","","Extensions to `Result&lt;Void, E&gt;`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null],[11,"description","","",2,null],[11,"cause","","",2,null]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["framestream"] = {"doc":"","items":[[3,"EncoderWriter","framestream","",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,null],[11,"new","","",0,{"inputs":[{"name":"w"},{"name":"option"}],"output":{"name":"encoderwriter"}}],[11,"finish","","",0,null],[11,"reset","","",0,null],[11,"into_inner","","",0,null]],"paths":[[3,"EncoderWriter"]]};
searchIndex["bytes"] = {"doc":"Provides abstractions for working with bytes.","items":[[3,"Reader","bytes","Adapts a `Buf` to the `io::Read` trait",null,null],[3,"Writer","","Adapts a `BufMut` to the `io::Write` trait",null,null],[3,"ByteBuf","","A buffer backed by `BytesMut`",null,null],[3,"SliceBuf","","A `Buf` backed by a contiguous region of memory.",null,null],[3,"Take","","A buffer adapter which limits the bytes read from an underlying value.",null,null],[3,"TakeMut","","A buffer adapter which limits the bytes written from an underlying value.",null,null],[3,"Bytes","","A reference counted slice of bytes.",null,null],[3,"BytesMut","","A unique reference to a slice of bytes.",null,null],[11,"new","","Create a new `ByteBuf` with 8kb capacity",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"with_capacity","","Create a new `ByteBuf` with `cap` capacity",0,{"inputs":[{"name":"usize"}],"output":{"name":"bytebuf"}}],[11,"from_bytes","","Create a new `ByteBuf` backed by `bytes`",0,{"inputs":[{"name":"bytesmut"}],"output":{"name":"bytebuf"}}],[11,"from_slice","","Create a new `ByteBuf` containing the given slice",0,{"inputs":[{"name":"t"}],"output":{"name":"bytebuf"}}],[11,"capacity","","Return the number of bytes the buffer can contain",0,null],[11,"position","","Return the read cursor position",0,null],[11,"set_position","","Set the read cursor position",0,null],[11,"len","","Return the number of buffered bytes",0,null],[11,"is_empty","","Returns `true` if the buffer contains no unread bytes",0,null],[11,"clear","","Clears the buffer, removing any written data",0,null],[11,"drain_read","","Splits the buffer into two at the current read index.",0,null],[11,"drain_to","","Splits the buffer into two at the given index.",0,null],[11,"reserve","","Reserves capacity for at least additional more bytes to be written in\nthe given `ByteBuf`. The `ByteBuf` may reserve more space to avoid\nfrequent reallocations.",0,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly additional more bytes to be\nwritten in the given `ByteBuf`. Does nothing if the capacity is already\nsufficient.",0,null],[11,"get_ref","","Gets a reference to the underlying `BytesMut`",0,null],[11,"into_inner","","Unwraps the `ByteBuf`, returning the underlying `BytesMut`",0,null],[11,"remaining","","",0,null],[11,"bytes","","",0,null],[11,"advance","","",0,null],[11,"copy_to_slice","","",0,null],[11,"remaining_mut","","",0,null],[11,"advance_mut","","",0,null],[11,"bytes_mut","","",0,null],[11,"copy_from_slice","","",0,null],[11,"from","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytes"}}],[11,"from","","",2,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytesmut"}}],[11,"fmt","","",0,null],[11,"write_str","","",0,null],[11,"write_fmt","","",0,null],[11,"new","","Creates a new `SliceBuf` wrapping the provided slice",3,{"inputs":[{"name":"t"}],"output":{"name":"slicebuf"}}],[11,"capacity","","Return the number of bytes the buffer can contain",3,null],[11,"position","","Return the read cursor position",3,null],[11,"set_position","","Set the read cursor position",3,null],[11,"len","","Return the number of buffered bytes",3,null],[11,"is_empty","","Returns `true` if the buffer contains no unread bytes",3,null],[11,"clear","","Clears the buffer, removing any written data",3,null],[11,"remaining","","",3,null],[11,"bytes","","",3,null],[11,"advance","","",3,null],[11,"copy_to_slice","","",3,null],[11,"remaining_mut","","",3,null],[11,"advance_mut","","",3,null],[11,"bytes_mut","","",3,null],[11,"copy_from_slice","","",3,null],[11,"fmt","","",3,null],[11,"write_str","","",3,null],[11,"write_fmt","","",3,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",4,null],[11,"get_ref","","Gets a reference to the underlying value in this `Take`.",4,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this `Take`.",4,null],[11,"limit","","Returns the maximum number of bytes that are made available from the\nunderlying value.",4,null],[11,"set_limit","","Sets the maximum number of bytes that are made available from the\nunderlying value.",4,null],[11,"remaining","","",4,null],[11,"bytes","","",4,null],[11,"advance","","",4,null],[11,"remaining_mut","","",4,null],[11,"bytes_mut","","",4,null],[11,"advance_mut","","",4,null],[11,"write_str","","",4,null],[11,"write_fmt","","",4,null],[11,"into_inner","","Consumes this `TakeMut`, returning the underlying value.",5,null],[11,"get_ref","","Gets a reference to the underlying value in this `TakeMut`.",5,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this `TakeMut`.",5,null],[11,"limit","","Returns the maximum number of bytes that are made available from the\nunderlying value.",5,null],[11,"set_limit","","Sets the maximum number of bytes that are made available from the\nunderlying value.",5,null],[11,"remaining","","",5,null],[11,"bytes","","",5,null],[11,"advance","","",5,null],[11,"remaining_mut","","",5,null],[11,"bytes_mut","","",5,null],[11,"advance_mut","","",5,null],[11,"write_str","","",5,null],[11,"write_fmt","","",5,null],[11,"source","","",1,null],[11,"new","","Return a `Reader` for the given `buf`",6,{"inputs":[{"name":"b"}],"output":{"name":"reader"}}],[11,"get_ref","","Gets a reference to the underlying buf.",6,null],[11,"get_mut","","Gets a mutable reference to the underlying buf.",6,null],[11,"into_inner","","Unwraps this `Reader`, returning the underlying `Buf`",6,null],[11,"read","","",6,null],[11,"new","","Return a `Writer` for teh given `buf`",7,{"inputs":[{"name":"b"}],"output":{"name":"writer"}}],[11,"get_ref","","Gets a reference to the underlying buf.",7,null],[11,"get_mut","","Gets a mutable reference to the underlying buf.",7,null],[11,"into_inner","","Unwraps this `Writer`, returning the underlying `BufMut`",7,null],[11,"write","","",7,null],[11,"flush","","",7,null],[11,"from_slice","","Creates a new `Bytes` and copy the given slice into it.",1,{"inputs":[{"name":"t"}],"output":{"name":"bytes"}}],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,null],[11,"is_empty","","Returns true if the value contains no bytes",1,null],[11,"as_slice","","Returns the inner contents of this `Bytes` as a slice.",1,null],[11,"slice","","Extracts a new `Bytes` referencing the bytes from range [start, end).",1,null],[11,"slice_from","","Extracts a new `Bytes` referencing the bytes from range [start, len).",1,null],[11,"slice_to","","Extracts a new `Bytes` referencing the bytes from range [0, end).",1,null],[11,"split_off","","Splits the bytes into two at the given index.",1,null],[11,"drain_to","","Splits the buffer into two at the given index.",1,null],[11,"try_mut","","Attempt to convert into a `BytesMut` handle.",1,null],[11,"into_mut","","Consumes handle, returning a new mutable handle",1,null],[11,"into_buf","","",1,null],[11,"clone","","",1,null],[11,"as_ref","","",1,null],[11,"deref","","",1,null],[11,"from","","",1,{"inputs":[{"name":"bytesmut"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",1,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"with_capacity","","Create a new `BytesMut` with the specified capacity.",2,{"inputs":[{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"from_slice","","Creates a new `BytesMut` and copy the given slice into it.",2,{"inputs":[{"name":"t"}],"output":{"name":"bytesmut"}}],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,null],[11,"is_empty","","Returns true if the value contains no bytes",2,null],[11,"capacity","","Returns the total byte capacity of this `BytesMut`",2,null],[11,"freeze","","Return an immutable handle to the bytes",2,null],[11,"split_off","","Splits the bytes into two at the given index.",2,null],[11,"drain_to","","Splits the buffer into two at the given index.",2,null],[11,"as_slice","","Returns the inner contents of this `BytesMut` as a slice.",2,null],[11,"as_mut","","Returns the inner contents of this `BytesMut` as a mutable slice",2,null],[11,"set_len","","Sets the length of the buffer",2,null],[11,"as_raw","","Returns the inner contents of this `BytesMut` as a mutable slice",2,null],[11,"into_buf","","",2,null],[11,"as_ref","","",2,null],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"from","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,null],[11,"eq","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"eq","","",2,null],[11,"eq","","",2,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[8,"Buf","","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",8,null],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",8,null],[10,"advance","","Advance the internal cursor of the Buf",8,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,null],[11,"copy_to","","Copies bytes from `self` into `dst`",8,null],[11,"copy_to_slice","","Copies bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes copied.",8,null],[11,"peek_u8","","Gets an unsigned 8 bit integer from the `Buf` without advancing the\nbuffer cursor",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from the `Buf`.",8,null],[11,"get_i8","","Gets a signed 8 bit integer from the `Buf`.",8,null],[11,"get_u16","","Gets an unsigned 16 bit integer from the `Buf`",8,null],[11,"get_i16","","Gets a signed 16 bit integer from the `Buf`",8,null],[11,"get_u32","","Gets an unsigned 32 bit integer from the `Buf`",8,null],[11,"get_i32","","Gets a signed 32 bit integer from the `Buf`",8,null],[11,"get_u64","","Gets an unsigned 64 bit integer from the `Buf`",8,null],[11,"get_i64","","Gets a signed 64 bit integer from the `Buf`",8,null],[11,"get_uint","","Gets an unsigned n-bytes integer from the `Buf`",8,null],[11,"get_int","","Gets a signed n-bytes integer from the `Buf`",8,null],[11,"get_f32","","Gets a IEEE754 single-precision (4 bytes) floating point number from\nthe `Buf`",8,null],[11,"get_f64","","Gets a IEEE754 double-precision (8 bytes) floating point number from\nthe `Buf`",8,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of Buf",8,null],[11,"take","","Create an adapter which will limit at most `limit` bytes from it.",8,null],[11,"reader","","Return a `Reader` for the value. Allows using a `Buf` as an `io::Read`",8,null],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written to the BufMut",9,null],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,null],[11,"has_remaining_mut","","Returns true iff there is any more space for bytes to be written",9,null],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of\nlength between 0 and `BufMut::remaining()`.",9,null],[11,"copy_from","","Copies bytes from `src` into `self`",9,null],[11,"copy_from_slice","","Copies bytes from the given slice into the `BufMut` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",9,null],[11,"put_str","","Writes the given string into self.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to the BufMut.",9,null],[11,"put_i8","","Writes a signed 8 bit integer to the BufMut.",9,null],[11,"put_u16","","Writes an unsigned 16 bit integer to the BufMut.",9,null],[11,"put_i16","","Writes a signed 16 bit integer to the BufMut.",9,null],[11,"put_u32","","Writes an unsigned 32 bit integer to the BufMut.",9,null],[11,"put_i32","","Writes a signed 32 bit integer to the BufMut.",9,null],[11,"put_u64","","Writes an unsigned 64 bit integer to the BufMut.",9,null],[11,"put_i64","","Writes a signed 64 bit integer to the BufMut.",9,null],[11,"put_uint","","Writes an unsigned n-bytes integer to the BufMut.",9,null],[11,"put_int","","Writes a signed n-bytes integer to the BufMut.",9,null],[11,"put_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe BufMut.",9,null],[11,"put_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe BufMut.",9,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of BufMut",9,null],[11,"take_mut","","Create an adapter which will limit at most `limit` bytes from it.",9,null],[11,"writer","","Return a `Write` for the value. Allows using a `BufMut` as an\n`io::Write`",9,null],[8,"IntoBuf","","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",10,null],[10,"into_buf","","Creates a `Buf` from a value.",10,null],[8,"Source","","A value that writes bytes from itself into a `BufMut`.",null,null],[10,"source","","Copy data from self into destination buffer",11,null],[8,"Sink","","A value that copies bytes from a `Buf` into itself",null,null],[10,"sink","","Copy bytes from `buf` into `self`",12,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,null],[11,"copy_to","","Copies bytes from `self` into `dst`",8,null],[11,"copy_to_slice","","Copies bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes copied.",8,null],[11,"peek_u8","","Gets an unsigned 8 bit integer from the `Buf` without advancing the\nbuffer cursor",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from the `Buf`.",8,null],[11,"get_i8","","Gets a signed 8 bit integer from the `Buf`.",8,null],[11,"get_u16","","Gets an unsigned 16 bit integer from the `Buf`",8,null],[11,"get_i16","","Gets a signed 16 bit integer from the `Buf`",8,null],[11,"get_u32","","Gets an unsigned 32 bit integer from the `Buf`",8,null],[11,"get_i32","","Gets a signed 32 bit integer from the `Buf`",8,null],[11,"get_u64","","Gets an unsigned 64 bit integer from the `Buf`",8,null],[11,"get_i64","","Gets a signed 64 bit integer from the `Buf`",8,null],[11,"get_uint","","Gets an unsigned n-bytes integer from the `Buf`",8,null],[11,"get_int","","Gets a signed n-bytes integer from the `Buf`",8,null],[11,"get_f32","","Gets a IEEE754 single-precision (4 bytes) floating point number from\nthe `Buf`",8,null],[11,"get_f64","","Gets a IEEE754 double-precision (8 bytes) floating point number from\nthe `Buf`",8,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of Buf",8,null],[11,"take","","Create an adapter which will limit at most `limit` bytes from it.",8,null],[11,"reader","","Return a `Reader` for the value. Allows using a `Buf` as an `io::Read`",8,null],[11,"has_remaining_mut","","Returns true iff there is any more space for bytes to be written",9,null],[11,"copy_from","","Copies bytes from `src` into `self`",9,null],[11,"copy_from_slice","","Copies bytes from the given slice into the `BufMut` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",9,null],[11,"put_str","","Writes the given string into self.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to the BufMut.",9,null],[11,"put_i8","","Writes a signed 8 bit integer to the BufMut.",9,null],[11,"put_u16","","Writes an unsigned 16 bit integer to the BufMut.",9,null],[11,"put_i16","","Writes a signed 16 bit integer to the BufMut.",9,null],[11,"put_u32","","Writes an unsigned 32 bit integer to the BufMut.",9,null],[11,"put_i32","","Writes a signed 32 bit integer to the BufMut.",9,null],[11,"put_u64","","Writes an unsigned 64 bit integer to the BufMut.",9,null],[11,"put_i64","","Writes a signed 64 bit integer to the BufMut.",9,null],[11,"put_uint","","Writes an unsigned n-bytes integer to the BufMut.",9,null],[11,"put_int","","Writes a signed n-bytes integer to the BufMut.",9,null],[11,"put_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe BufMut.",9,null],[11,"put_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe BufMut.",9,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of BufMut",9,null],[11,"take_mut","","Create an adapter which will limit at most `limit` bytes from it.",9,null],[11,"writer","","Return a `Write` for the value. Allows using a `BufMut` as an\n`io::Write`",9,null]],"paths":[[3,"ByteBuf"],[3,"Bytes"],[3,"BytesMut"],[3,"SliceBuf"],[3,"Take"],[3,"TakeMut"],[3,"Reader"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"IntoBuf"],[8,"Source"],[8,"Sink"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["lazycell"] = {"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled\n`Cell`, but with frozen contents.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with frozen contents.",null,null],[3,"AtomicLazyCell","","A lazily filled `Cell`, with frozen contents.",null,null],[11,"new","","Creates a new, empty, `LazyCell`.",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"fill","","Put a value into this cell.",0,null],[11,"filled","","Test whether this cell has been previously filled.",0,null],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell\nitself.",0,null],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,null],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"fill","","Put a value into this cell.",1,null],[11,"filled","","Test whether this cell has been previously filled.",1,null],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell\nitself.",1,null],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,null]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"Entry","","A handle to an occupied slot in the `Slab`",null,null],[3,"VacantEntry","","A handle to a vacant slot in the `Slab`",null,null],[3,"Iter","","An iterator over the values stored in the `Slab`",null,null],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",null,null],[11,"with_capacity","","Returns an empty `Slab` with the requested capacity",0,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"len","","Returns the number of values stored by the `Slab`",0,null],[11,"capacity","","Returns the total capacity of the `Slab`",0,null],[11,"is_empty","","Returns true if the `Slab` is storing no values",0,null],[11,"available","","Returns the number of available slots remaining in the `Slab`",0,null],[11,"has_available","","Returns true if the `Slab` has available slots",0,null],[11,"contains","","Returns true if the `Slab` contains a value for the given token",0,null],[11,"get","","Get a reference to the value associated with the given token",0,null],[11,"get_mut","","Get a mutable reference to the value associated with the given token",0,null],[11,"insert","","Insert a value into the slab, returning the associated token",0,null],[11,"entry","","Returns a handle to an entry.",0,null],[11,"vacant_entry","","Returns a handle to a vacant entry.",0,null],[11,"remove","","Releases the given slot",0,null],[11,"retain","","Retain only the elements specified by the predicate.",0,null],[11,"iter","","An iterator for visiting all elements stored in the `Slab`",0,null],[11,"iter_mut","","A mutable iterator for visiting all elements stored in the `Slab`",0,null],[11,"clear","","Empty the slab, by freeing all entries",0,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Slab`. Does nothing if the capacity is\nalready sufficient.",0,null],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"fmt","","",0,null],[11,"replace","","Replace the value stored in the entry",1,null],[11,"replace_with","","Apply the function to the current value, replacing it with the result\nof the function.",1,null],[11,"remove","","Remove and return the value stored in the entry",1,null],[11,"get","","Get a reference to the value stored in the entry",1,null],[11,"get_mut","","Get a mutable reference to the value stored in the entry",1,null],[11,"into_mut","","Convert the entry handle to a mutable reference",1,null],[11,"index","","Return the entry index",1,null],[11,"insert","","Insert a value into the entry",2,null],[11,"index","","Returns the entry index",2,null],[11,"next","","",3,null],[11,"next","","",4,null]],"paths":[[3,"Slab"],[3,"Entry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
initSearch(searchIndex);
